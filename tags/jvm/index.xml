<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jvm on 知不足而后进</title>
    <link>https://feng1st.github.io/tags/jvm/</link>
    <description>Recent content in Jvm on 知不足而后进</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>utf-8</language>
    <lastBuildDate>Wed, 07 Jun 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/jvm/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java内存模型和GC机制摘要</title>
      <link>https://feng1st.github.io/post/2017/06/jvm-memory-gc/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017/06/jvm-memory-gc/</guid>
      <description>Java对象  对象位置  对象实例在堆中分配 实例对应的类信息在方法区分配  对象信息  对象实例包含对象头和对象属性 对象头包含对象信息，包括分代年龄、锁信息等；还包括对方法区类信息的引用 类信息包含对父类/接口的引用，用于方法重载  对象大小  空对象大小等于对象头大小，在32位虚拟机占8字节，64位占16字节，开启压缩占12字节 引用在32位虚拟机占4字节，64位占8字节，开启压缩占4字节 数组类型大小要在元素类型大小上增加4字节数组长度 对象最终大小按8字节对齐   Java内存区域  程序计数器 Program Counter Register  每线程 对于Java方法，记录当前字节码位置；对于Native方法，记录为Undefined  虚拟机栈 VM Stack  每线程 保存方法调用时的栈帧 Stack Frame  栈帧存放方法调用的局部变量表、操作栈、动态连接、方法出口等 局部变量表保存简单变量和对象的引用 栈帧大小在方法生存期内固定  如果栈深度超过虚拟机规定大小，抛出StackOverflowError 如果可供分配的内存不够，抛出OutOfMemoryError  本地方法栈 Native Method Stack  类似虚拟机栈  堆 Heap  线程共享 存储对象实例 是涉及GC的主要区域  方法区 Method Area  线程共享 保存加载的类信息（包括版本、接口、属性、方法、final常量、静态变量等）和运行时常量池 Runtime Constant Pool（包括字面常量、符号引用和直接引用） 在分代GC机制里，一般被成为永久代 Permanent Gen 对于存在大量Proxy动态类的系统，要考虑回收的问题   堆和栈的区别  栈：存放栈帧，内部包括简单变量和对象引用，在栈顶分配，后进先出，速度快 堆：存放对象实例，会因回收造成内存碎片，需要寻找下一个可供分配的连续空间，速度慢  对象访问方式  通过句柄池  栈或堆中的对象引用指向句柄池句柄，句柄分别指向堆中对象实例和方法区类信息 对象引用到句柄是多对一，句柄到对象实例是一对一，意味着对象实例因为GC移动而发生地址改变，只需要修改句柄  直接分配  栈或堆中的对象引用指向堆中的对象实例，对象实例内部指向方法区类信息 无中间层，较快。但是一旦对象实例移动，则需要更新所有的引用 HotSpot采用   对象生命周期  引用计数法  存在环状引用的问题  可达性分析算法  GC Roots  虚拟机栈引用的对象 本地方法栈引用的对象 方法区类静态属性引用的对象 方法区常量引用的对象    内存分代 不同对象的生存周期不同，不能因为回收短期对象，就扫描整个堆区</description>
    </item>
    
  </channel>
</rss>
