<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gc on 技术随笔</title>
    <link>http://codeone.io/tags/gc/</link>
    <description>Recent content in Gc on 技术随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 07 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://codeone.io/tags/gc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java内存模型和GC机制摘要</title>
      <link>http://codeone.io/post/2017/06/jvm-memory-gc/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/post/2017/06/jvm-memory-gc/</guid>
      <description>Java对象  对象位置
 对象实例在堆中分配
 实例对应的类信息在方法区分配
  对象信息
 对象实例包含对象头和对象属性
 对象头包含对象信息，包括分代年龄、锁信息等；还包括对方法区类信息的引用
 类信息包含对父类/接口的引用，用于方法重载
  对象大小
 空对象大小等于对象头大小，在32位虚拟机占8字节，64位占16字节，开启压缩占12字节
 引用在32位虚拟机占4字节，64位占8字节，开启压缩占4字节
 数组类型大小要在元素类型大小上增加4字节数组长度
 对象最终大小按8字节对齐
   Java内存区域  程序计数器 Program Counter Register
 每线程
 对于Java方法，记录当前字节码位置；对于Native方法，记录为Undefined
  虚拟机栈 VM Stack
 每线程
 保存方法调用时的栈帧 Stack Frame
 栈帧存放方法调用的局部变量表、操作栈、动态连接、方法出口等
 局部变量表保存简单变量和对象的引用
 栈帧大小在方法生存期内固定
  如果栈深度超过虚拟机规定大小，抛出StackOverflowError
 如果可供分配的内存不够，抛出OutOfMemoryError
  本地方法栈 Native Method Stack
 类似虚拟机栈</description>
    </item>
    
  </channel>
</rss>