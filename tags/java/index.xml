<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 技术随笔</title>
    <link>http://codeone.io/tags/java/</link>
    <description>Recent content in Java on 技术随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 10 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://codeone.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java NIO摘要</title>
      <link>http://codeone.io/post/2017/06/java-nio/</link>
      <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/post/2017/06/java-nio/</guid>
      <description>比较经典和精简的教程，先直接发链接：
http://tutorials.jenkov.com/java-nio/
NIO的实现不复杂，但是其体现了一个统一、可伸缩的面向数据/信息流的设计思想
例如，换用消息队列，就可以扩展到分布式系统里去
一些思考点  Channel和Stream有什么不同？
 Channel双向，Stream一般单向
 Channel支持异步
 Channel搭配Buffer使用
  ServerSocketChannel和SocketChannel有什么不同？
 SocketChannel用于单个连接
 ServerSocketChannel用于监听端口，对每一个接受的连接创建一个SocketChannel
  FileChannel.transferTo(&amp;hellip;, SocketChannel)有什么需要注意的？
 SocketChannel非阻塞且发送缓冲已满，可能只传输部分
  SocketChannel的blocking和non-blocking模式有什么不同？
 相对于阻塞，connect()直接返回，需要后继调用finishConnect()判断成功
 write()/read()可能未实际读写就返回
  ServerSocketChannel的blocking和non-blocking模式有什么不同？
 相对于阻塞，accept()直接返回，如没有接受连接，返回null
 write()/read()可能未实际读写就返回
  Blocking模式Socket有什么问题？
 一般会用一个线程处理一个连接，所以支撑的连接数非常有限
 如果使用连接池复用活动连接，一些慢速或者非活动连接可能会占满连接池
  Non-blocking模式Socket有哪些挑战？
 读到的字节流拆分Message：文章提到了TLV，但最好用长度+内容+校验构成
 长度：TLV中的L
 内容：类型是包含在这里面的，比如protobuf协议
 校验：用于验证数据错误，或者网络错误，通知重传
  读写的Message要有长度限制，否则一个伪造的字节流就能把服务器撑垮
 一般会定义一种特定Message，专门用来拆分大的其它Message，长度和校验部分机制不变，内容部分构成如下
 总段数
 本段序号
 本段内容</description>
    </item>
    
    <item>
      <title>Java内存模型和GC机制摘要</title>
      <link>http://codeone.io/post/2017/06/jvm-memory-gc/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/post/2017/06/jvm-memory-gc/</guid>
      <description>Java对象  对象位置
 对象实例在堆中分配
 实例对应的类信息在方法区分配
  对象信息
 对象实例包含对象头和对象属性
 对象头包含对象信息，包括分代年龄、锁信息等；还包括对方法区类信息的引用
 类信息包含对父类/接口的引用，用于方法重载
  对象大小
 空对象大小等于对象头大小，在32位虚拟机占8字节，64位占16字节，开启压缩占12字节
 引用在32位虚拟机占4字节，64位占8字节，开启压缩占4字节
 数组类型大小要在元素类型大小上增加4字节数组长度
 对象最终大小按8字节对齐
   Java内存区域  程序计数器 Program Counter Register
 每线程
 对于Java方法，记录当前字节码位置；对于Native方法，记录为Undefined
  虚拟机栈 VM Stack
 每线程
 保存方法调用时的栈帧 Stack Frame
 栈帧存放方法调用的局部变量表、操作栈、动态连接、方法出口等
 局部变量表保存简单变量和对象的引用
 栈帧大小在方法生存期内固定
  如果栈深度超过虚拟机规定大小，抛出StackOverflowError
 如果可供分配的内存不够，抛出OutOfMemoryError
  本地方法栈 Native Method Stack
 类似虚拟机栈</description>
    </item>
    
  </channel>
</rss>