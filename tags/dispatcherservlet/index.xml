<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dispatcherservlet on 知耻而后勇，知不足而后进</title>
    <link>https://feng1st.github.io/tags/dispatcherservlet/index.xml</link>
    <description>Recent content in dispatcherservlet on 知耻而后勇，知不足而后进</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>utf-8</language>
    <copyright>nf_xp</copyright>
    <atom:link href="https://feng1st.github.io/tags/dispatcherservlet/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spring DispatcherServlet相关知识点</title>
      <link>https://feng1st.github.io/post/2017-06-25-spring-dispatcher-servlet/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-25-spring-dispatcher-servlet/</guid>
      <description>

&lt;h2 id=&#34;dispatcherservlet作用&#34;&gt;DispatcherServlet作用&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;作为Spring MVC的集中访问点&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;通过HandlerMapping，将请求映射到Handler&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;返回一个HandlerExecutionChain，包含一个HandlerAdaptor和多个HandlerInterceptor&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;通过不同的HandlerAdaptor，支持不同的处理器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;通过ViewResolver，支持到具体视图的解析&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;通过HandlerExceptionResolver，实现对异常的处理&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每一部分都可以很方便的扩展&lt;/p&gt;

&lt;h2 id=&#34;dispatcherservlet流程&#34;&gt;DispatcherServlet流程&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;请求被DispatcherServlet截获&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;DispatcherServlet根据handlerMapping，获得一个HandlerExecutionChain，然后获得HandlerAdaptor&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;HandlerAdaptor实例化一个ServletInvocableHandlerMethod，对应具体Contrller的一个方法&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ServletInvocableHandlerMethod.invokeAndHandle()分两步进行处理&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Object returnValue = invokeForRequest(...);&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.returnValueHandlers.handleReturnValue(returnValue, ...);&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;处理请求主要是支持对不同类型的参数的解析&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;通过argumentResolvers实现&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在父类InvocableHandlerMethod定义&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;是HandlerMethodArgumentResolverComposite类&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;是HandlerMethodArgumentResolver的组合&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;处理响应主要是对不同返回值做不同的转换&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;通过returnValueHandlers实现&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;是HandlerMethodReturnValueHandlerComposite类&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;是HandlerMethodReturnValueHandler的组合&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;argumentResolvers和returnValueHandlers是在实例化ServletInvocableHandlerMethod时，从RequestMappingHandlerAdaptor传入的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;RequestMappingHandlerAdaptor的这两个属性，是在实例化时，从Spring容器依赖注入的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这两个属性默认值就包含了各种常见的HandlerMethodArgumentResolver和HandlerMethodReturnValueHandler&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;这就是为什么Controller的方法自动支持包括&lt;code&gt;@RequestBody&lt;/code&gt;, &lt;code&gt;@RequestParam&lt;/code&gt;，&lt;code&gt;@PathValue&lt;/code&gt;, 对象, WebRequest, ServletRequst, HttpSession, InputStream, Reader, ServletResponse, OutputStream, Writer等类型的参数&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;例子：RequestResponseBodyMethodProcessor&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;用来处理&lt;code&gt;@RequestBody&lt;/code&gt;和&lt;code&gt;@ResponseBody&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;同时实现了HandlerMethodArgumentResolver和HandlerMethodReturnValueHandler接口&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内部实现主要是读写Request和Response的Body，和使用HttpMessageConverter转换数据&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.chawenti.com/articles/23718.html&#34;&gt;http://www.chawenti.com/articles/23718.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>