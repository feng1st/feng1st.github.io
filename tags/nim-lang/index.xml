<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nim-lang on Code One</title>
    <link>http://codeone.io/tags/nim-lang/</link>
    <description>Recent content in Nim-lang on Code One</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 22 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://codeone.io/tags/nim-lang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Nim4LeetCode] 16. 3Sum Closest</title>
      <link>http://codeone.io/nim-lang/leetcode/0016-3sum-closest/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0016-3sum-closest/</guid>
      <description>Problem Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
 For example, given array S = {-1 2 1 -4}, and target = 1. The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 15. 3Sum</title>
      <link>http://codeone.io/nim-lang/leetcode/0015-3sum/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0015-3sum/</guid>
      <description>Problem Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note: The solution set must not contain duplicate triplets.
For example, given array S = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ]  Solution import algorithm proc threeSum(nums: openArray[int]): seq[(int, int, int)] = result = newSeq[(int, int, int)]() let sorted = sorted(nums, system.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 14. Longest Common Prefix</title>
      <link>http://codeone.io/nim-lang/leetcode/0014-longest-common-prefix/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0014-longest-common-prefix/</guid>
      <description> Problem Write a function to find the longest common prefix string amongst an array of strings.
Solution proc longestCommonPrefix(strs: openArray[string]): string = if strs.len == 0: return &amp;#34;&amp;#34; let str0 = strs[0] if str0.len == 0: return &amp;#34;&amp;#34; for j in 0 .. str0.len - 1: for i in 1 .. strs.len - 1: let strI = strs[i] if strI.len &amp;lt;= j or strI[j] != str0[j]: return str0.substr(0, j - 1) result = str0 when isMainModule: assert longestCommonPrefix([]) == &amp;#34;&amp;#34; assert longestCommonPrefix([&amp;#34;&amp;#34;]) == &amp;#34;&amp;#34; assert longestCommonPrefix([&amp;#34;&amp;#34;, &amp;#34;abc&amp;#34;]) == &amp;#34;&amp;#34; assert longestCommonPrefix([&amp;#34;abc&amp;#34;, &amp;#34;&amp;#34;]) == &amp;#34;&amp;#34; assert longestCommonPrefix([&amp;#34;abc&amp;#34;, &amp;#34;123&amp;#34;]) == &amp;#34;&amp;#34; assert longestCommonPrefix([&amp;#34;abc&amp;#34;, &amp;#34;ab&amp;#34;, &amp;#34;a&amp;#34;]) == &amp;#34;a&amp;#34; assert longestCommonPrefix([&amp;#34;a&amp;#34;, &amp;#34;ab&amp;#34;, &amp;#34;abc&amp;#34;]) == &amp;#34;a&amp;#34;</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 13. Roman to Integer</title>
      <link>http://codeone.io/nim-lang/leetcode/0013-roman-to-integer/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0013-roman-to-integer/</guid>
      <description>Problem Given a roman numeral, convert it to an integer.
Input is guaranteed to be within the range from 1 to 3999.
Solution const ORD_A = ord(&amp;#39;A&amp;#39;) MAP = [0, 0, 100, 500, 0, 0, 0, # A - G 0, 1, 0, 0, 50, 1000, 0, # H - N 0, 0, 0, 0, 0, 0, # O - T 0, 5, 0, 10, 0, 0] # U - Z proc romanToInt(s: string): int = var last = 0 for i in countdown(s.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 12. Integer to Roman</title>
      <link>http://codeone.io/nim-lang/leetcode/0012-integer-to-roman/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0012-integer-to-roman/</guid>
      <description> Problem Given an integer, convert it to a roman numeral.
Input is guaranteed to be within the range from 1 to 3999.
Solution const M = [&amp;#34;&amp;#34;, &amp;#34;M&amp;#34;, &amp;#34;MM&amp;#34;, &amp;#34;MMM&amp;#34;] C = [&amp;#34;&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;CC&amp;#34;, &amp;#34;CCC&amp;#34;, &amp;#34;CD&amp;#34;, &amp;#34;D&amp;#34;, &amp;#34;DC&amp;#34;, &amp;#34;DCC&amp;#34;, &amp;#34;DCCC&amp;#34;, &amp;#34;CM&amp;#34;] X = [&amp;#34;&amp;#34;, &amp;#34;X&amp;#34;, &amp;#34;XX&amp;#34;, &amp;#34;XXX&amp;#34;, &amp;#34;XL&amp;#34;, &amp;#34;L&amp;#34;, &amp;#34;LX&amp;#34;, &amp;#34;LXX&amp;#34;, &amp;#34;LXXX&amp;#34;, &amp;#34;XC&amp;#34;] I = [&amp;#34;&amp;#34;, &amp;#34;I&amp;#34;, &amp;#34;II&amp;#34;, &amp;#34;III&amp;#34;, &amp;#34;IV&amp;#34;, &amp;#34;V&amp;#34;, &amp;#34;VI&amp;#34;, &amp;#34;VII&amp;#34;, &amp;#34;VIII&amp;#34;, &amp;#34;IX&amp;#34;] proc intToRoman(num: int): string = result = M[num div 1000] &amp;amp; C[(num mod 1000) div 100] &amp;amp; X[(num mod 100) div 10] &amp;amp; I[num mod 10] when isMainModule: assert intToRoman(1) == &amp;#34;I&amp;#34; assert intToRoman(3999) == &amp;#34;MMMCMXCIX&amp;#34;</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 11. Container With Most Water</title>
      <link>http://codeone.io/nim-lang/leetcode/0011-container-with-most-water/</link>
      <pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0011-container-with-most-water/</guid>
      <description>Problem Given n non-negative integers a1, a2, &amp;hellip;, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 10. Regular Expression Matching</title>
      <link>http://codeone.io/nim-lang/leetcode/0010-regular-expression-matching/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0010-regular-expression-matching/</guid>
      <description>Problem Implement regular expression matching with support for &#39;.&#39; and &#39;*&#39;.
&#39;.&#39; Matches any single character. &#39;*&#39; Matches zero or more of the preceding element. The matching should cover the entire input string (not partial). The function prototype should be: bool isMatch(const char *s, const char *p) Some examples: isMatch(&amp;quot;aa&amp;quot;,&amp;quot;a&amp;quot;) → false isMatch(&amp;quot;aa&amp;quot;,&amp;quot;aa&amp;quot;) → true isMatch(&amp;quot;aaa&amp;quot;,&amp;quot;aa&amp;quot;) → false isMatch(&amp;quot;aa&amp;quot;, &amp;quot;a*&amp;quot;) → true isMatch(&amp;quot;aa&amp;quot;, &amp;quot;.*&amp;quot;) → true isMatch(&amp;quot;ab&amp;quot;, &amp;quot;.*&amp;quot;) → true isMatch(&amp;quot;aab&amp;quot;, &amp;quot;c*a*b&amp;quot;) → true  Solution import sequtils proc isMatch(s: string, p: string): bool = var dp = newSeqWith(s.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 9. Palindrome Number</title>
      <link>http://codeone.io/nim-lang/leetcode/0009-palindrome-number/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0009-palindrome-number/</guid>
      <description>Problem Determine whether an integer is a palindrome. Do this without extra space.
Some hints:
Could negative integers be palindromes? (ie, -1)
If you are thinking of converting the integer to string, note the restriction of using extra space.
You could also try reversing an integer. However, if you have solved the problem &amp;ldquo;Reverse Integer&amp;rdquo;, you know that the reversed integer might overflow. How would you handle such case?</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 8. String to Integer (atoi)</title>
      <link>http://codeone.io/nim-lang/leetcode/0008-string-to-integer-atoi/</link>
      <pubDate>Wed, 14 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0008-string-to-integer-atoi/</guid>
      <description>Problem Implement atoi to convert a string to an integer.
Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.
Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.
Requirements for atoi:
The function first discards as many whitespace characters as necessary until the first non-whitespace character is found.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 7. Reverse Integer</title>
      <link>http://codeone.io/nim-lang/leetcode/0007-reverse-integer/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0007-reverse-integer/</guid>
      <description>Problem Given a 32-bit signed integer, reverse digits of an integer.
Example 1:
Input: 123 Output: 321  Example 2:
Input: -123 Output: -321  Example 3:
Input: 120 Output: 21  Note:
Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
Solution const INT_MIN = 0x80000000&amp;#39;i32 INT_MAX = 0x7FFFFFFF&amp;#39;i32 INT_MIN_DIV_10 = INT_MIN div 10 INT_MAX_DIV_10 = INT_MAX div 10 proc reverse(x: int32): int32 = var t = x y = 0&amp;#39;i32 while t !</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 6. ZigZag Conversion</title>
      <link>http://codeone.io/nim-lang/leetcode/0006-zigzag-conversion/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0006-zigzag-conversion/</guid>
      <description>Problem The string &amp;quot;PAYPALISHIRING&amp;quot; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
P A H N A P L S I I G Y I R  And then read line by line: &amp;quot;PAHNAPLSIIGYIR&amp;quot;
Write the code that will take a string and make this conversion given a number of rows:</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 5. Longest Palindromic Substring</title>
      <link>http://codeone.io/nim-lang/leetcode/0005-longest-palindromic-substring/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0005-longest-palindromic-substring/</guid>
      <description>Problem Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
Example:
Input: &amp;quot;babad&amp;quot; Output: &amp;quot;bab&amp;quot; Note: &amp;quot;aba&amp;quot; is also a valid answer.  Example:
Input: &amp;quot;cbbd&amp;quot; Output: &amp;quot;bb&amp;quot;  Solution proc expandAroundCenter(s: string, left: int, right: int): (int, int) = var l = left r = right while l &amp;gt;= 0 and r &amp;lt; s.len and s[l] == s[r]: l -= 1 r += 1 result = (l + 1, r - 1) proc longestPalindrome(s: string): string = var left = 0 right = 0 for i in 0 .</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 4. Median of Two Sorted Arrays</title>
      <link>http://codeone.io/nim-lang/leetcode/0004-median-of-two-sorted-arrays/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0004-median-of-two-sorted-arrays/</guid>
      <description>Problem There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
Example 1:
nums1 = [1, 3] nums2 = [2] The median is 2.0  Example 2:
nums1 = [1, 2] nums2 = [3, 4] The median is (2 + 3)/2 = 2.5  Solution proc findMedianSortedArrays(nums1: seq[int], nums2: seq[int]): float = var A = nums1 B = nums2 m = A.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 3. Longest Substring Without Repeating Characters</title>
      <link>http://codeone.io/nim-lang/leetcode/0003-longest-substring-without-repeating-characters/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0003-longest-substring-without-repeating-characters/</guid>
      <description>Problem Given a string, find the length of the longest substring without repeating characters.
Examples:
Given &amp;quot;abcabcbb&amp;quot;, the answer is &amp;quot;abc&amp;quot;, which the length is 3.
Given &amp;quot;bbbbb&amp;quot;, the answer is &amp;quot;b&amp;quot;, with the length of 1.
Given &amp;quot;pwwkew&amp;quot;, the answer is &amp;quot;wke&amp;quot;, with the length of 3. Note that the answer must be a substring, &amp;quot;pwke&amp;quot; is a subsequence and not a substring.
Solution import tables proc lengthOfLongestSubstring(s: string): int = var map = initTable[char, int]() n = 0 for i in 0 .</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 2. Add Two Numbers</title>
      <link>http://codeone.io/nim-lang/leetcode/0002-add-two-numbers/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0002-add-two-numbers/</guid>
      <description>Problem You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example
Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4) Output: 7 -&amp;gt; 0 -&amp;gt; 8 Explanation: 342 + 465 = 807.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 1. Two Sum</title>
      <link>http://codeone.io/nim-lang/leetcode/0001-two-sum/</link>
      <pubDate>Wed, 07 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0001-two-sum/</guid>
      <description>Problem Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example:
Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].  Solution import tables proc twoSum(nums: openArray[int], target: int): (int, int) = var idxMap = initTable[int, int]() for i in 0 .</description>
    </item>
    
  </channel>
</rss>