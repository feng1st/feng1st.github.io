<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Soa on 技术随笔</title>
    <link>http://codeone.io/tags/soa/</link>
    <description>Recent content in Soa on 技术随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 18 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://codeone.io/tags/soa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>面向服务架构笔记</title>
      <link>http://codeone.io/post/2017/06/soa/</link>
      <pubDate>Sun, 18 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/post/2017/06/soa/</guid>
      <description>分布式应用架构的演化  DOA 分布式对象架构
 主要特征：
 对象是可以在服务器/容器间自由“移动”的
 被调用的对象究竟是本地，还是远程，对调用者来说是透明的
  例子：EJB
 问题：复杂和性能
 远程调用有更多可能出错的环节
 分布式事务需要两阶段提交
 远程通讯额外的开销
   SOA 面向服务架构
 服务是可“移动”的，但是远没有DOA那样不可控
 当调用其它服务时，调用者知道这是一个远程调用。对复杂度和性能有更好的把控
   企业服务总线 ESB ESB是SOA的核心组件，其主要特点：
 服务访问单点：服务提供者和服务消费者都只需要知道ESB的存在。服务发生变化，只需要修改ESB的配置
 事物管理器：分布式事物管理器放在这个地方很自然
 安全管理器：访问权限、授权管理
 服务代理：统一服务接口和数据格式的一个Adaptor和Proxy
 对外部的网关
  但是ESB也有一定的缺点：
 单点故障：ESB发生故障，整个系统将不可用
 单点性能：分布式系统中，承担ESB角色的单点是必须的，比如服务注册和发现。
但是，究竟要承担哪些具体的工作，是一个需要考虑的点。
比如，如果服务之间的通讯都要经过ESB，ESB会不会成为整个系统的性能瓶颈，会不会增大故障的概率
 同上，增加了服务间访问的间接性，降低了性能
  SOA简介 SOA的目标是实现灵活可变的分布式IT系统，这需要：
 标准化：协议标准化，实现互访问
 复用：服务可复用
 松耦合可编排：分布式对象技术分离了连接逻辑，消息中间件实现了连接逻辑的异步，SOA架构实现了业务逻辑的解耦
  SOA治理  服务注册与发现</description>
    </item>
    
  </channel>
</rss>