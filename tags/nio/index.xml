<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nio on 知耻而后勇，知不足而后进</title>
    <link>https://feng1st.github.io/tags/nio/index.xml</link>
    <description>Recent content in nio on 知耻而后勇，知不足而后进</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>utf-8</language>
    <copyright>nf_xp</copyright>
    <atom:link href="https://feng1st.github.io/tags/nio/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java NIO摘要</title>
      <link>https://feng1st.github.io/post/2017-06-10-java-nio/</link>
      <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-10-java-nio/</guid>
      <description>

&lt;p&gt;比较经典和精简的教程，先直接发链接：&lt;br /&gt;
&lt;a href=&#34;http://tutorials.jenkov.com/java-nio/&#34;&gt;http://tutorials.jenkov.com/java-nio/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NIO的实现不复杂，但是其体现了一个统一、可伸缩的面向数据/信息流的设计思想&lt;br /&gt;
例如，换用消息队列，就可以扩展到分布式系统里去&lt;/p&gt;

&lt;h2 id=&#34;一些思考点&#34;&gt;一些思考点&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Channel和Stream有什么不同？&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;Channel双向，Stream一般单向&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Channel支持异步&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Channel搭配Buffer使用&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;ServerSocketChannel和SocketChannel有什么不同？&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;SocketChannel用于单个连接&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ServerSocketChannel用于监听端口，对每一个接受的连接创建一个SocketChannel&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;FileChannel.transferTo(&amp;hellip;, SocketChannel)有什么需要注意的？&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;SocketChannel非阻塞且发送缓冲已满，可能只传输部分&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SocketChannel的blocking和non-blocking模式有什么不同？&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;相对于阻塞，connect()直接返回，需要后继调用finishConnect()判断成功&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;write()/read()可能未实际读写就返回&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;ServerSocketChannel的blocking和non-blocking模式有什么不同？&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;相对于阻塞，accept()直接返回，如没有接受连接，返回null&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;write()/read()可能未实际读写就返回&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Blocking模式Socket有什么问题？&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;一般会用一个线程处理一个连接，所以支撑的连接数非常有限&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果使用连接池复用活动连接，一些慢速或者非活动连接可能会占满连接池&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Non-blocking模式Socket有哪些挑战？&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;读到的字节流拆分Message：文章提到了TLV，但最好用长度+内容+校验构成&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;长度：TLV中的L&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内容：类型是包含在这里面的，比如protobuf协议&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;校验：用于验证数据错误，或者网络错误，通知重传&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;读写的Message要有长度限制，否则一个伪造的字节流就能把服务器撑垮&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;一般会定义一种特定Message，专门用来拆分大的其它Message，长度和校验部分机制不变，内容部分构成如下&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;总段数&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;本段序号&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;本段内容&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;发送方不能把所有的Channel都注册到Selector，因为Selector.select()时，可能大部分Channel都可写，全部返回，性能低下&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;当本Channel对应缓冲区有待发送数据时，才注册到Selector&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;当缓冲区数据发送完毕时，从Selector取消注册&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Selector有哪两种底层实现？&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;Reactor：轮询Channel对应底层IO句柄。当连接数过多时，性能低下。这个可以算是多路复用，因为select()时还是有等待的过程&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;e-poll：注册回调函数，只有当有对应事件发生时，才通知Selector。这个算是真正的异步。Linux直接支持&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>