<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dubbo on 技术随笔</title>
    <link>https://codeone.io/tags/dubbo/</link>
    <description>Recent content in Dubbo on 技术随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 27 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codeone.io/tags/dubbo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker容器运行dubbo应用</title>
      <link>https://codeone.io/post/2017/06/dubbo-in-docker/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codeone.io/post/2017/06/dubbo-in-docker/</guid>
      <description>参考了这篇文章： https://yq.aliyun.com/articles/60789
大致步骤是一样的。但是，文章中的部署方式是，使用docker-compose，将zookeeper、provider、consumer编排在一起了。
它们使用的是同一个虚拟网络，provider将自己在虚拟网络里的ip注册到zookeeper，consumer能顺利访问到。
但开发环境一般会分开部署，zookeeper、provider、consumer一般不在同一个网络。
为了让consumer能够通过provider注册到zookeeper里的ip进行访问，这里让provider直接使用host的网络，多个provider靠端口区分。
application.properties
server.port=${SERVER_PORT:0}  这个是用来区分spring-boot-starter-web里自带tomcat的端口
services.xml
 &amp;lt;dubbo:registry protocol=&amp;quot;zookeeper&amp;quot; address=&amp;quot;${ZOO_SERVERS}&amp;quot;/&amp;gt; &amp;lt;dubbo:protocol name=&amp;quot;dubbo&amp;quot; port=&amp;quot;${DUBBO_PORT}&amp;quot;/&amp;gt;  这个是用来区分provider通过dubbo协议暴露服务的端口
docker-compose.yml
version: &#39;2&#39; services: provider1: image: provider restart: always network_mode: host environment: ZOO_SERVERS: localhost:2181,localhost:2182,localhost:2183 DUBBO_PORT: 20880 SERVER_PORT: 8080 provider2: image: provider restart: always network_mode: host environment: ZOO_SERVERS: localhost:2181,localhost:2182,localhost:2183 DUBBO_PORT: 20881 SERVER_PORT: 8081  起了两个实例，分别占用主机网络的20880, 8080, 20881, 8081端口
zookeeper集群使用自己的网络，但是将端口映射到了主机的2181, 2182, 2183
更复杂的部署，应考虑使用Docker Swarm
还有其它一些细节，可以参考源代码：
https://github.com/feng1st/microservices-demo</description>
    </item>
    
  </channel>
</rss>