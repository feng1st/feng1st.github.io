<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>service on 知耻而后勇，知不足而后进</title>
    <link>https://feng1st.github.io/categories/service/index.xml</link>
    <description>Recent content in service on 知耻而后勇，知不足而后进</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>utf-8</language>
    <copyright>nf_xp</copyright>
    <atom:link href="https://feng1st.github.io/categories/service/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker容器运行dubbo应用</title>
      <link>https://feng1st.github.io/post/2017-06-27-dubbo-in-docker/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-27-dubbo-in-docker/</guid>
      <description>&lt;p&gt;参考了这篇文章： &lt;a href=&#34;https://yq.aliyun.com/articles/60789&#34;&gt;https://yq.aliyun.com/articles/60789&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大致步骤是一样的。但是，文章中的部署方式是，使用docker-compose，将zookeeper、provider、consumer编排在一起了。&lt;br /&gt;
它们使用的是同一个虚拟网络，provider将自己在虚拟网络里的ip注册到zookeeper，consumer能顺利访问到。&lt;/p&gt;

&lt;p&gt;但开发环境一般会分开部署，zookeeper、provider、consumer一般不在同一个网络。&lt;br /&gt;
为了让consumer能够通过provider注册到zookeeper里的ip进行访问，这里让provider直接使用host的网络，多个provider靠端口区分。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;application.properties&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server.port=${SERVER_PORT:0}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个是用来区分spring-boot-starter-web里自带tomcat的端口&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;services.xml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;dubbo:registry protocol=&amp;quot;zookeeper&amp;quot; address=&amp;quot;${ZOO_SERVERS}&amp;quot;/&amp;gt;
    &amp;lt;dubbo:protocol name=&amp;quot;dubbo&amp;quot; port=&amp;quot;${DUBBO_PORT}&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个是用来区分provider通过dubbo协议暴露服务的端口&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: &#39;2&#39;
services:
    provider1:
        image: provider
        restart: always
        network_mode: host
        environment:
            ZOO_SERVERS: localhost:2181,localhost:2182,localhost:2183
            DUBBO_PORT: 20880
            SERVER_PORT: 8080

    provider2:
        image: provider
        restart: always
        network_mode: host
        environment:
            ZOO_SERVERS: localhost:2181,localhost:2182,localhost:2183
            DUBBO_PORT: 20881
            SERVER_PORT: 8081
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起了两个实例，分别占用主机网络的20880, 8080, 20881, 8081端口&lt;br /&gt;
zookeeper集群使用自己的网络，但是将端口映射到了主机的2181, 2182, 2183&lt;/p&gt;

&lt;p&gt;更复杂的部署，应考虑使用Docker Swarm&lt;/p&gt;

&lt;p&gt;还有其它一些细节，可以参考源代码：&lt;br /&gt;
&lt;a href=&#34;https://github.com/feng1st/microservices-demo&#34;&gt;https://github.com/feng1st/microservices-demo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring实现RESTful Service笔记</title>
      <link>https://feng1st.github.io/post/2017-06-26-spring-rest/</link>
      <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-26-spring-rest/</guid>
      <description>

&lt;p&gt;来源：&lt;br /&gt;
&lt;a href=&#34;https://spring.io/guides/gs/rest-service/&#34;&gt;https://spring.io/guides/gs/rest-service/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文采用代码及分析的形式&lt;/p&gt;

&lt;h2 id=&#34;greetingcontroller-java&#34;&gt;GreetingController.java&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;src/main/java/hello/GreetingController.java&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package hello;

import java.util.concurrent.atomic.AtomicLong;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class GreetingController {

    private static final String template = &amp;quot;Hello, %s!&amp;quot;;
    private final AtomicLong counter = new AtomicLong();

    @RequestMapping(&amp;quot;/greeting&amp;quot;)
    public Greeting greeting(@RequestParam(value=&amp;quot;name&amp;quot;, defaultValue=&amp;quot;World&amp;quot;) String name) {
        return new Greeting(counter.incrementAndGet(),
                            String.format(template, name));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;整合&lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@ResponseBody&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;MVC里的Controller，Spring的DispatcherServlet，通过HandlerMapping，找到Controller后，将请求发送过来进行处理&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ResponseBody&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;将返回的对象，通过注册的HttpMessageConverter，转换成字符串，写入Response的body里&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对应的是&lt;code&gt;@RequestBody&lt;/code&gt;，通过Request header的Content-Type，将Request的body转换成对象&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@RequestMapping&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;URL到Controller类和方法的映射&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@RequestParam&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;URL参数到方法参数的映射&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RestController和一般的MVC Controller最主要的不同的地方：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RestController用Response Body返回json序列化后的对象&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;MVC Controller使用视图模板，返回ModelAndView经渲染后的HTML视图&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;figure &gt;
    &lt;a href=&#34;1353059506_5137.jpg&#34;&gt;
        &lt;img src=&#34;1353059506_5137.jpg&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;
&lt;br /&gt;
图片来源：&lt;a href=&#34;http://blog.csdn.net/cswhale/article/details/16941281&#34;&gt;http://blog.csdn.net/cswhale/article/details/16941281&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DispatcherServlet实际上分开处理请求和响应的&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;处理请求&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;RestController: 返回对象&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;MVC: 返回ModelAndView&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;处理响应&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;RestController: 找到合适的HttpMessageConverter，转换成字符串，写入Response的Body&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;MVC: 找到对应的View，对ModelAndView进行渲染，渲染成HTML&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;application-java&#34;&gt;Application.java&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;src/main/java/hello/Application.java&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package hello;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt;, 整合下列注解:&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;类作为Bean定义的来源，参考&lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;指示Spring Boot根据classpath、其它Bean和一些属性自动配置&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnableWebMvc&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;如果在classpath发现&lt;strong&gt;spring-webmvc&lt;/strong&gt;，自动启用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;视应用为web application，并启用DispatcherServlet等关键行为&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;从类所在包下扫描其它组件、配置、服务，找到其它controller&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;整个SpringBoot应用可以打包成一个单独的jar，这个特性非常有利于部署到容器&lt;/p&gt;

&lt;h2 id=&#34;依靠配置实现mvc&#34;&gt;依靠配置实现MVC&lt;/h2&gt;

&lt;p&gt;如果不使用SpringBoot，而是通过配置来实现，应该怎样做呢？&lt;br /&gt;
这个不是完全RESTful相关的，但有助于我们了解Spring的内部机制&lt;/p&gt;

&lt;p&gt;Controller接口，注意不是@Controller注解：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface Controller {
    ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该方法被DispatcherServlet调用&lt;/p&gt;

&lt;p&gt;重要的实现类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AbstractController：检查HTTP方法，检查Session等&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;MultiActionController：在一个Controller里处理多个动作，比如对同一资源的增删改查，通过MethodNameResolver映射请求到方法&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;web.xml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;ISO-8859-1&amp;quot;?&amp;gt;
&amp;lt;web-app xmlns=&amp;quot;http://java.sun.com/xml/ns/j2ee&amp;quot;
  xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
  xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd&amp;quot;
  version=&amp;quot;2.5&amp;quot;&amp;gt;
&amp;lt;servlet&amp;gt;
     &amp;lt;servlet-name&amp;gt;dispatcherServlet&amp;lt;/servlet-name&amp;gt;
     &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
     &amp;lt;init-param&amp;gt;
           &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
           &amp;lt;param-value&amp;gt;/WEB-INF/dispatcherServlet-servlet.xml&amp;lt;/param-value&amp;gt;
     &amp;lt;/init-param&amp;gt;
     &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
     &amp;lt;servlet-name&amp;gt;dispatcherServlet&amp;lt;/servlet-name&amp;gt;
     &amp;lt;url-pattern&amp;gt;*.do&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;所有以.do结尾的请求，都将被DispatcherServlet处理&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;dispatcherServlet-servlet.xml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE beans PUBLIC &amp;quot;-//SPRING//DTD BEAN 2.0//EN&amp;quot;
&amp;quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&amp;quot;&amp;gt;
&amp;lt;beans&amp;gt;
     &amp;lt;bean id=&amp;quot;urlMapping&amp;quot; class=&amp;quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;mappings&amp;quot;&amp;gt;
                 &amp;lt;props&amp;gt;
                       &amp;lt;prop key=&amp;quot;sample.do&amp;quot;&amp;gt;sampleMultiActionController&amp;lt;/prop&amp;gt;
                 &amp;lt;/props&amp;gt;
            &amp;lt;/property&amp;gt;
     &amp;lt;/bean&amp;gt;
     &amp;lt;bean id=&amp;quot;viewResolver&amp;quot; class=&amp;quot;org.springframework.web.servlet.view.InternalResourceViewResolver&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;viewClass&amp;quot;&amp;gt;
                 &amp;lt;value&amp;gt;org.springframework.web.servlet.view.InternalResourceView&amp;lt;/value&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&amp;quot;prefix&amp;quot;&amp;gt;
                 &amp;lt;value&amp;gt;/WEB-INF/jsp/&amp;lt;/value&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&amp;quot;suffix&amp;quot;&amp;gt;
                 &amp;lt;value&amp;gt;.jsp&amp;lt;/value&amp;gt;
            &amp;lt;/property&amp;gt;
     &amp;lt;/bean&amp;gt;


     &amp;lt;bean id=&amp;quot;sampleMultiActionController&amp;quot; class=&amp;quot;com.test.SampleMultiActionController&amp;quot;&amp;gt;
           &amp;lt;property name=&amp;quot;methodNameResolver&amp;quot;&amp;gt;
                 &amp;lt;ref bean=&amp;quot;paraMethodResolver&amp;quot;/&amp;gt;
           &amp;lt;/property&amp;gt;
     &amp;lt;!--viewName属性将依赖注入sampleMultiActionController类--&amp;gt;
           &amp;lt;property name=&amp;quot;viewName&amp;quot;&amp;gt;
                 &amp;lt;value&amp;gt;showme&amp;lt;/value&amp;gt;
           &amp;lt;/property&amp;gt;
     &amp;lt;/bean&amp;gt;

     &amp;lt;bean id=&amp;quot;paraMethodResolver&amp;quot; class=&amp;quot;org.springframework.web.servlet.mvc.multiaction.ParameterMethodNameResolver&amp;quot;&amp;gt;
           &amp;lt;property name=&amp;quot;paramName&amp;quot; value=&amp;quot;whichMethod&amp;quot;/&amp;gt;
     &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sample.do&lt;/code&gt;会被&lt;code&gt;SampleMultiActionController&lt;/code&gt;处理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;viewName&lt;/code&gt;即&lt;code&gt;showme&lt;/code&gt;，被依赖注入传入Controller，通过&lt;code&gt;return new ModelAndView(getViewName(), ...)&lt;/code&gt;指定视图名称&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;viewResolver&lt;/code&gt;解析视图为&lt;code&gt;/WEB-INF/jsp/showme.jsp&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;methodNameResolver&lt;/code&gt;指定&lt;code&gt;ParameterMethodNameResolver&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paraMethodResolver&lt;/code&gt;指定的参数名为&lt;code&gt;whichMethod&lt;/code&gt;，即能将&lt;code&gt;sample.do?whichMethod=insert&lt;/code&gt;这样的请求，映射到&lt;code&gt;insert()&lt;/code&gt;方法&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Spring DispatcherServlet相关知识点</title>
      <link>https://feng1st.github.io/post/2017-06-25-spring-dispatcher-servlet/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-25-spring-dispatcher-servlet/</guid>
      <description>

&lt;h2 id=&#34;dispatcherservlet作用&#34;&gt;DispatcherServlet作用&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;作为Spring MVC的集中访问点&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;通过HandlerMapping，将请求映射到Handler&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;返回一个HandlerExecutionChain，包含一个HandlerAdaptor和多个HandlerInterceptor&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;通过不同的HandlerAdaptor，支持不同的处理器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;通过ViewResolver，支持到具体视图的解析&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;通过HandlerExceptionResolver，实现对异常的处理&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每一部分都可以很方便的扩展&lt;/p&gt;

&lt;h2 id=&#34;dispatcherservlet流程&#34;&gt;DispatcherServlet流程&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;请求被DispatcherServlet截获&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;DispatcherServlet根据handlerMapping，获得一个HandlerExecutionChain，然后获得HandlerAdaptor&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;HandlerAdaptor实例化一个ServletInvocableHandlerMethod，对应具体Contrller的一个方法&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ServletInvocableHandlerMethod.invokeAndHandle()分两步进行处理&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Object returnValue = invokeForRequest(...);&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.returnValueHandlers.handleReturnValue(returnValue, ...);&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;处理请求主要是支持对不同类型的参数的解析&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;通过argumentResolvers实现&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在父类InvocableHandlerMethod定义&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;是HandlerMethodArgumentResolverComposite类&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;是HandlerMethodArgumentResolver的组合&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;处理响应主要是对不同返回值做不同的转换&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;通过returnValueHandlers实现&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;是HandlerMethodReturnValueHandlerComposite类&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;是HandlerMethodReturnValueHandler的组合&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;argumentResolvers和returnValueHandlers是在实例化ServletInvocableHandlerMethod时，从RequestMappingHandlerAdaptor传入的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;RequestMappingHandlerAdaptor的这两个属性，是在实例化时，从Spring容器依赖注入的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这两个属性默认值就包含了各种常见的HandlerMethodArgumentResolver和HandlerMethodReturnValueHandler&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;这就是为什么Controller的方法自动支持包括&lt;code&gt;@RequestBody&lt;/code&gt;, &lt;code&gt;@RequestParam&lt;/code&gt;，&lt;code&gt;@PathValue&lt;/code&gt;, 对象, WebRequest, ServletRequst, HttpSession, InputStream, Reader, ServletResponse, OutputStream, Writer等类型的参数&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;例子：RequestResponseBodyMethodProcessor&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;用来处理&lt;code&gt;@RequestBody&lt;/code&gt;和&lt;code&gt;@ResponseBody&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;同时实现了HandlerMethodArgumentResolver和HandlerMethodReturnValueHandler接口&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内部实现主要是读写Request和Response的Body，和使用HttpMessageConverter转换数据&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.chawenti.com/articles/23718.html&#34;&gt;http://www.chawenti.com/articles/23718.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>微服务架构摘要</title>
      <link>https://feng1st.github.io/post/2017-06-23-microservices/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-23-microservices/</guid>
      <description>

&lt;p&gt;原文: &lt;a href=&#34;https://www.nginx.com/blog/introduction-to-microservices/&#34;&gt;https://www.nginx.com/blog/introduction-to-microservices/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;单一框架有什么问题-微服务框架解决什么问题&#34;&gt;单一框架有什么问题 / 微服务框架解决什么问题？&lt;/h2&gt;

&lt;p&gt;单一框架经过常年发展，扩充之后：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;过于复杂，难于理解和修改。修改容易引入bug&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;启动变慢，降低调试和开发速度&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;无法持续部署，无法快速升级。一个组件需要升级，整个应用都需要重新部署。部署后，因为受影响部分不明，需要更多的人工测试&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;无法根据不同组件的需求进行伸缩扩展。比如，部分组件是CPU密集型，部分组件是内存密集型；部分组件压力小，单个实例可以应付，部分组件压力大，有部署多个实例的需求&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;可靠性，组件异常（比如内存泄露），导致整个应用异常&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;难于升级到新的技术和框架&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;微服务框架&#34;&gt;微服务框架&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;按功能划分，比如订单管理、客户端管理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;每个微服务是一个单独的小应用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;微服务对外暴露API，比如REST API&lt;br /&gt;
微服务之间可以通过暴露的API互相调用&lt;br /&gt;
微服务间还可以通过消息系统实现异步调用&lt;br /&gt;
外界一般不直接范围后端服务，而是通过API网关&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;微服务通常通过虚拟机或Docker部署&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;伸缩模型&#34;&gt;伸缩模型&lt;/h3&gt;

&lt;p&gt;x轴：水平复制，靠克隆伸缩。通过在负载均衡后部署多个实例，解决可用性和吞吐量的问题&lt;br /&gt;
y轴：功能解耦，靠拆分不同的事物伸缩。将单一应用通过功能/业务拆分成多个微服务&lt;br /&gt;
z轴：数据分区，靠拆分相似的事物伸缩&lt;/p&gt;

&lt;h3 id=&#34;微服务架构对数据库schema的影响&#34;&gt;微服务架构对数据库schema的影响&lt;/h3&gt;

&lt;p&gt;微服务架构要求每个微服务有自己单独的数据库schema&lt;br /&gt;
这是为了更彻底的解耦&lt;br /&gt;
但是不可避免的，多个微服务数据库间存在重复数据&lt;/p&gt;

&lt;h3 id=&#34;微服务架构和soa的异同&#34;&gt;微服务架构和SOA的异同&lt;/h3&gt;

&lt;p&gt;微服务架构和SOA在表现层有相似性：都是由多个服务构成&lt;br /&gt;
区别：&lt;br /&gt;
1. 微服务架构弃用了比较重的WS规范，采用轻量的协议，比如REST&lt;br /&gt;
2. 微服务架构弃用了ESB&lt;/p&gt;

&lt;h3 id=&#34;微服务的好处&#34;&gt;微服务的好处&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;将单一应用解构成多个服务，让每一个服务面临的复杂度降低，变得可管理、可控制、可维护&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;开发方面：可以选用自己的技术，可以使用较新的技术&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;部署方面：可以单独部署，更容易部署和测试&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;伸缩方面：更容易按需扩展多实例&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;微服务的问题&#34;&gt;微服务的问题&lt;/h3&gt;

&lt;p&gt;下面这些问题都不难解决，但是需要清楚存在这些问题&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;分布式架构下调用的开销，以及服务不可用的处理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;数据库拆分后，分布式事务基本不采用，需要最终一致方案&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;测试更困难，可能需要启动服务本身和依赖服务（或者伪服务）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;升级链，如果A依赖于B，需要先升级B，再升级A&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;部署，需要自动化工具&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;api网关&#34;&gt;API网关&lt;/h2&gt;

&lt;p&gt;门面模式 Facade&lt;/p&gt;

&lt;h3 id=&#34;客户端直接和后端服务通讯的问题-api网关要解决的问题&#34;&gt;客户端直接和后端服务通讯的问题 / API网关要解决的问题&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;客户端需要调用多个后端服务，走广域网，非常慢&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;客户端代码复杂&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;客户端需要支持后端服务API所使用的通讯协议&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;后端服务接口无法自由变更，服务之间无法合并和拆分&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;API网关除了解决上诉问题，还能：&lt;br /&gt;
1. 提供负载均衡、缓存、安全/权限控制，监控等&lt;br /&gt;
2. 为不同的客户端提供不同的接口&lt;/p&gt;

&lt;h3 id=&#34;挑战&#34;&gt;挑战：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;需要额外实现和维护一个高可用的组件&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;可能成为开发瓶颈&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;实现api网关&#34;&gt;实现API网关&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;性能和高伸缩性&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;要支持异步、非阻塞通讯&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;技术选型：Netty, Spring Reactor, &amp;hellip;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;使用反应式编程模型 Reactive Programming Model&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;需求：要支持直接转发单个请求；要支持调用多个请求，并聚合结果&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;需求：要支持彼此无关服务的并发调用；要支持有依赖关系服务的先后调用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不推荐使用回调实现异步（不直观、不容易理解、容易出错）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;推荐使用Reactive&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;技术选型：CompletableFuture, RxJava&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;服务调用&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;同步调用：HTTP、Thrift&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;异步、消息机制：JMS、AMQP、Zeromq&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;API网关需要这些服务通讯，也应支持上诉通讯机制&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;服务发现&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;客户端发现：先请求服务地址列表，然后选择调用，负载均衡在客户端&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;服务端发现：注册总心选好后发给客户端，负载均衡在服务端&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;（这里的客户端指API网关）&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;处理部分失败&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;面对服务慢或者不可用的处理。核心是不能阻塞API网关&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;要根据服务是否重要，选择：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;直接返回给客户端错误&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;返回空、默认值、缓存值、备份数据等&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技术选型：Netflix Hystrix&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;进程间通讯-ipc&#34;&gt;进程间通讯 IPC&lt;/h2&gt;

&lt;h3 id=&#34;交互风格&#34;&gt;交互风格&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;一对一&lt;/th&gt;
&lt;th&gt;一对多&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;Request/Response&lt;/td&gt;
&lt;td&gt;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;异步&lt;/td&gt;
&lt;td&gt;Notification&lt;/td&gt;
&lt;td&gt;Publish/Subscribe&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Request/Async response&lt;/td&gt;
&lt;td&gt;Public/Async responses&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
&lt;li&gt;Request/Response: 发送请求，等待响应。应有超时。线程阻塞&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Notification (单向请求): 发送请求，不期待有响应&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Request/Async response: 发送请求，不期待有即时响应。线程不阻塞&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Publish/Subscribe: 发布请求，多个消费者消费&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Publish/Async responses: 发布请求，等待多个响应。有超时&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;接口设计&#34;&gt;接口设计&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;基于消息：定义消息channel和消息类型&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;基于HTTP：定义URL、请求和响应格式&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;接口升级&#34;&gt;接口升级&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;向前兼容的小升级，比如增加/删除请求/响应字段：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;缺失的字段采用默认值，忽略额外的字段&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;消息格式要支持，比如Protobuf，Json&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大的升级：要使用版本区分，服务要在一段时间内同时支持新旧版本接口&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;处理部分失败&#34;&gt;处理部分失败&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;一定要有超时，不能无限阻塞&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;要限制客户端向同一服务的请求的数量，如果超限，直接失败&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;船舱隔离模式：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;不同的调用分配到不同的线程池，不能因为慢速调用占满快速调用的线程池&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;电路熔断器模式：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;连续超时：断开&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;等待一段时间：半开放&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;又有超时：再断开&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;或不再超时：恢复&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;要根据服务是否重要，选择：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;直接返回给客户端错误&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;返回空、默认值、缓存值、备份数据等&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ipc技术&#34;&gt;IPC技术&lt;/h3&gt;

&lt;h4 id=&#34;异步-基于消息的通讯&#34;&gt;异步、基于消息的通讯&lt;/h4&gt;

&lt;p&gt;关键字：消息头、消息体、频道、生产者、消费者、broker、点对点、发布/订阅、……&lt;br /&gt;
这里不展开&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;好处&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;客户端和服务解耦。客户端也不需要使用服务发现机制&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;消息缓存。支持消费者不实时在线&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;支持上面提到的所有交互风格&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;是显式IPC，不像有些RPC机制，尝试屏蔽是远程调用的事实。开发者有更好的意识和控制权&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;缺点&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;额外的操作复杂性，需要引入一个高可用的消息中间件（这个应该不是问题）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用来实现Request/Response比较复杂：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;客户端的请求消息要带上响应的channel和唯一id&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;服务的响应消息要带上这个唯一id，发送到响应channel&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;客户端要用唯一id，从响应channel找到匹配响应消息&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不难理解，但是确实比直接基于请求/响应的机制更复杂&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;同步-基于请求-响应的通讯&#34;&gt;同步、基于请求/响应的通讯&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;REST&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;核心是“资源”，基于HTTP请求类型和参数，实现资源的“增删改查”&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;REST定义也有不同的级别，从POST到同一URL，靠参数指定操作和对象，到靠HTTP请求类型指定操作，不同URL指定操作对象。不绝对&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;优势&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;基于HTTP，简单熟悉&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;构造请求简单，测试方便&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;天然支持请求/响应模式&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;防火墙友好&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;无中间层，系统结构简单&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;缺点&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;对逻辑上的单向请求（Notification），服务端也要发响应&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;服务端必须实时在线&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;客户端和服务端耦合。需要有服务发现机制&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;IDL：RAML和Swagger&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Thrift&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;支持请求/响应和通知（单向）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;支持Json、二进制和压缩二进制。取舍是人工可读和占空间大小&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;支持HTTP和TCP。取舍是是否防火墙友好和效率&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;服务发现&#34;&gt;服务发现&lt;/h2&gt;

&lt;h3 id=&#34;为什么需要服务发现&#34;&gt;为什么需要服务发现&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;集群动态伸缩&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;基于Container的部署方式，IP和端口也是动态分配的&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;服务发现方式&#34;&gt;服务发现方式&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;客户端发现模式&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;服务端在启动时向注册中心注册、停止时取消注册、靠心跳刷新&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;客户端向注册中心获取服务端列表&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;客户端主动负载均衡，比如采用一致性hash&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;优点：直接&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;优点：可根据业务灵活选用负载均衡策略&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;缺点：客户端和注册中心耦合&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;实现技巧：客户端和服务端均在注册中心注册，便于服务端变更时，注册中心主动推送。参考dubbo&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;服务端发现模式&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;客户端请求发给负载均衡服务器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;负载均衡服务器负责和注册中心通讯&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;优点：客户端和服务发现逻辑解耦&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;缺点：需要高可用的负载均衡服务器&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;注册中心&#34;&gt;注册中心&lt;/h3&gt;

&lt;p&gt;参考：Zookeeper&lt;br /&gt;
注册方式：&lt;br /&gt;
1. 自注册：优点：直接；缺点：服务和注册中心耦合&lt;br /&gt;
2. 第三方组件注册：优点：解耦；缺点：额外高可用组件&lt;/p&gt;

&lt;h2 id=&#34;事件驱动数据模型&#34;&gt;事件驱动数据模型&lt;/h2&gt;

&lt;p&gt;数据随着微服务拆分，带来下面的挑战：&lt;br /&gt;
1. 跨服务事务的一致性&lt;br /&gt;
    - 2PC 两阶段提交在此情况下不可用，CAP要优先满足A，或者BASE&lt;br /&gt;
2. 怎样从多个服务请求数据&lt;/p&gt;

&lt;h3 id=&#34;事件驱动架构&#34;&gt;事件驱动架构&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;将跨服务的事务划分为多步&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;每一步，一个微服务更新业务对象（本地事务），同时产生一个事件以激发下一步&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;事件通过消息系统传递&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例子：创建订单&lt;br /&gt;
1. 订单服务创建订单，状态为NEW，然后发布订单创建消息到消息系统&lt;br /&gt;
2. 客户服务收到订单创建消息，预留订单费用，发布预留订单费用消息&lt;br /&gt;
    - 预留费用至少涉及到两个表，是一个本地事务。要能想到&lt;br /&gt;
    - 1. &lt;code&gt;customer.credit_limit - sum(reserved_credit.amount) &amp;gt;= order_total&lt;/code&gt;&lt;br /&gt;
    - 2. &lt;code&gt;insert into reserved_credit (... amount) values (... order_total)&lt;/code&gt;&lt;br /&gt;
    - 如果要保证事务发送成功，事务里还要包括第3个表，事务表（见下）&lt;br /&gt;
    - 
&lt;figure &gt;
    &lt;a href=&#34;Richardson-microservices-part5-credit-check-2-e1449727579423.png&#34;&gt;
        &lt;img src=&#34;Richardson-microservices-part5-credit-check-2-e1449727579423.png&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;
&lt;br /&gt;
3. 订单服务收到预留订单费用消息，将订单状态更新为OPEN&lt;/p&gt;

&lt;p&gt;因为服务统一向消息系统发事务，可以有一个视图服务，订阅这些事务，更新事务，实现跨服务查询&lt;/p&gt;

&lt;h3 id=&#34;原子性&#34;&gt;原子性&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;使用本地事务发布事件&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;将操作业务对象和插入事件表放到一个事务里面&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;
&lt;figure &gt;
    &lt;a href=&#34;Richardson-microservices-part5-local-transaction-e1449727484579.png&#34;&gt;
        &lt;img src=&#34;Richardson-microservices-part5-local-transaction-e1449727484579.png&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;事件发布者轮询事件表，确保事件发送成功 at least once&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;挖掘数据库事务日志&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;实现较复杂&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;使用事件源&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;保存的不是结果，而是操作步骤&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;逻辑较复杂&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;每微服务一虚拟机&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;隔离性高&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;开销大&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;每微服务一容器&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;隔离性低&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;开销小&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;实现：Docker&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;重构单一架构到微服务架构&#34;&gt;重构单一架构到微服务架构&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;新功能直接使用微服务实现&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;前端路由请求到旧单一应用和新微服务&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;新微服务使用“胶水代码”访问旧单一应用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;访问旧单一应用的数据&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;远程调用旧单一应用接口&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;直接访问旧单一应用数据库&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;维护独立数据，和旧数据库同步&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;拆分前后端&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;最容易拆的是表现层和逻辑层。逻辑层和数据层稍难&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;表现层拆出来后便于独立开发和A/B测试&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;拆模块&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;优先级&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;先拆变化频繁的，便于加速后继开发&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;再拆资源要求不一样的，便于分开部署和伸缩&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;再拆和其它模块交互较粗的，比如通过消息系统交互的&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;步骤&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;模块和剩余部分改成IPC通讯&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;将模块独立成微服务&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>微服务架构笔记</title>
      <link>https://feng1st.github.io/post/2017-06-19-microservices/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-19-microservices/</guid>
      <description>

&lt;p&gt;原文：&lt;a href=&#34;http://blog.csdn.net/mindfloating/article/details/24583369&#34;&gt;http://blog.csdn.net/mindfloating/article/details/24583369&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;什么是微服务架构&#34;&gt;什么是微服务架构&lt;/h2&gt;

&lt;p&gt;采用一组服务的方式来构建一个应用；&lt;br /&gt;
服务独立部署在不同的进程；&lt;br /&gt;
服务之间通过轻量级的机制来通讯，比如RPC、HTTP；&lt;br /&gt;
服务可独立扩展伸缩；&lt;br /&gt;
每个服务定义了明确的边界；&lt;br /&gt;
不同服务可以采用不同的技术实现，由独立的团队维护。&lt;/p&gt;

&lt;h2 id=&#34;微服务架构的特征&#34;&gt;微服务架构的特征&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;通过服务实现组件化&lt;br /&gt;
和传统方式，或者说单一架构(Monolithic Architecture)类比：&lt;br /&gt;
传统方式实现组件化：通过库(library)；和应用运行在一个进程里；组件升级，应用需要重新部署&lt;br /&gt;
服务方式实现组件化：通过服务；部署在不同的进程；可以单独升级&lt;br /&gt;
因为服务是跨进程的，所以在设计阶段就必须定义好明确的边界&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;按业务能力来划分服务和组织团队&lt;br /&gt;
传统方式按技术分层：前端、后端、数据库&lt;br /&gt;
微服务架构：按业务划分，全栈工程师或全栈团队&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;服务即产品&lt;br /&gt;
团队即负责开发，也负责维护&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;智能终端和哑管道&lt;br /&gt;
抛弃过于复杂的ESB，服务自己处理自己的业务逻辑&lt;br /&gt;
服务间通讯尽量轻量，不添加额外的规则&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;去中心统一化&lt;br /&gt;
各服务可以选用自己的技术实现&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;自动化基础设施服务&lt;br /&gt;
必须要存在自动化的服务治理平台，才能降低开发、调试、测试、部署、监控、维护的复杂度&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Design for failure&lt;br /&gt;
服务消费者要优雅的处理远程调用带来的错误&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;进化设计&lt;br /&gt;
发送方要最小化，只发送必要的信息&lt;br /&gt;
接收方要最大化，要最大化容错，要允许传入不认识的参数&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;服务的划分&#34;&gt;服务的划分&lt;/h2&gt;

&lt;p&gt;参考点之一：如果功能A发生改变，功能B也要随之改变，一般它们应划在同一个服务里&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>面向服务架构笔记</title>
      <link>https://feng1st.github.io/post/2017-06-18-soa/</link>
      <pubDate>Sun, 18 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-18-soa/</guid>
      <description>

&lt;h2 id=&#34;分布式应用架构的演化&#34;&gt;分布式应用架构的演化&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DOA 分布式对象架构&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;主要特征：&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;对象是可以在服务器/容器间自由“移动”的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;被调用的对象究竟是本地，还是远程，对调用者来说是透明的&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;例子：EJB&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;问题：复杂和性能&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;远程调用有更多可能出错的环节&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;分布式事务需要两阶段提交&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;远程通讯额外的开销&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SOA 面向服务架构&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;服务是可“移动”的，但是远没有DOA那样不可控&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;当调用其它服务时，调用者知道这是一个远程调用。对复杂度和性能有更好的把控&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;企业服务总线-esb&#34;&gt;企业服务总线 ESB&lt;/h2&gt;

&lt;p&gt;ESB是SOA的核心组件，其主要特点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;服务访问单点：服务提供者和服务消费者都只需要知道ESB的存在。服务发生变化，只需要修改ESB的配置&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;事物管理器：分布式事物管理器放在这个地方很自然&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;安全管理器：访问权限、授权管理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;服务代理：统一服务接口和数据格式的一个Adaptor和Proxy&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对外部的网关&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是ESB也有一定的缺点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;单点故障：ESB发生故障，整个系统将不可用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;单点性能：分布式系统中，承担ESB角色的单点是必须的，比如服务注册和发现。&lt;br /&gt;
但是，究竟要承担哪些具体的工作，是一个需要考虑的点。&lt;br /&gt;
比如，如果服务之间的通讯都要经过ESB，ESB会不会成为整个系统的性能瓶颈，会不会增大故障的概率&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;同上，增加了服务间访问的间接性，降低了性能&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;soa简介&#34;&gt;SOA简介&lt;/h2&gt;

&lt;p&gt;SOA的目标是实现灵活可变的分布式IT系统，这需要：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;标准化：协议标准化，实现互访问&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;复用：服务可复用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;松耦合可编排：分布式对象技术分离了连接逻辑，消息中间件实现了连接逻辑的异步，SOA架构实现了业务逻辑的解耦&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;soa治理&#34;&gt;SOA治理&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;服务注册与发现&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;可靠性&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;安全性&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;负载均衡&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;监控与日志&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;服务限流和容错&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;完整soa模型&#34;&gt;完整SOA模型&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;基础设施服务&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;企业服务总线&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;关键服务组件&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;开发工具&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;管理工具&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tutorials.jenkov.com/soa/&#34;&gt;http://tutorials.jenkov.com/soa/&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.vsharing.com/fengjicheng/A1059842.html&#34;&gt;http://blog.vsharing.com/fengjicheng/A1059842.html&lt;/a&gt;&lt;br /&gt;
-&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>高并发解决思路</title>
      <link>https://feng1st.github.io/post/2017-06-17-high-concurrency/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-17-high-concurrency/</guid>
      <description>

&lt;p&gt;解决高并发，无非两个方向：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;分而治之：分流&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;优化单个服务器处理能力&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;客户端&#34;&gt;客户端&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;尽量使用缓存&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;尽量本地处理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;尽量减少不必要的访问&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;分流&#34;&gt;分流&lt;/h2&gt;

&lt;p&gt;LVS、Nginx、Varnish放到一块说&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;负载均衡&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;业务拆分&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;静态内容直接返回，包括使用CDN&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;缓存（动态内容缓存、页面片段缓存）&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;优化单个服务器处理程序&#34;&gt;优化单个服务器处理程序&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;缓存：缓存永远是最重要的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;异步：能异步就异步&lt;br /&gt;
如果有多个异步调用没有依赖关系，可以并行调用，然后在最后一起等结果&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;多线程：&lt;br /&gt;
如果是CPU吃重的应用，线程数过高不能解决问题&lt;br /&gt;
I/O吃重要分成两种：1种是因为传输数据量过大，导致I/O重，这种线程数高不解决问题&lt;br /&gt;
另一种是传输数据不大，但是等待远端处理的时间很长，这种可以提升线程数，并发处理后面的任务&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;预处理：预先算出局部结果，要获取整体结果时，只需要基于局部结果计算。比如月报表可以基于天报表&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;还有一种预处理，是和缓存结合的预处理&lt;br /&gt;
不是等到缓存失效时，再穿透后端。而是缓存快要失效时，就起线程向后端请求数据更新缓存。在线程处理期间，缓存里的数据依然是有效的。线程处理完毕，缓存里的数据已更新&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;优化SQL，正确使用索引&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;尽量不要使用分布式事务&lt;br /&gt;
2阶段提交不是万能药&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;各节点进入事务&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;各节点事务执行完毕，prepare（意味着，接下来出了问题，比如重启，事务也能生效）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;各节点commit&lt;br /&gt;
假设最后一个节点，commit前离线了，并且永远不再上线，事务状态依然是错误的&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;应用算法优化&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;优化数据层&#34;&gt;优化数据层&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;合理选用数据库（OLTP、OLAP）和引擎（InnoDB、MyISAM）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;合理设置索引&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;使用集群，读写分离&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;合理分表分库&lt;br /&gt;
分表我看来最大的好处是，是索引变小，能够加载到内存&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>