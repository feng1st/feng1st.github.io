<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on 技术随笔</title>
    <link>https://feng1st.github.io/categories/network/</link>
    <description>Recent content in Network on 技术随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://feng1st.github.io/categories/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTP协议摘要</title>
      <link>https://feng1st.github.io/post/2017/06/http-protocol/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017/06/http-protocol/</guid>
      <description>HTTP协议概述  基于服务器/客户端，请求/响应 无连接（1.1开始支持长连接Web Socket） 无状态（需要依赖会话维持状态） 应用层协议，基于TCP  URL http://host:port/res_uri.html?param=...
 协议：如http, https, ftp等 用户名/密码：部分协议例如ftp支持用户名密码 域名和端口：要访问服务器的域名和端口，不同协议有自己的默认端口 访问资源：要访问资源的路径和参数  请求 GET /index.html HTTP/1.0&amp;lt;CRLF&amp;gt; Host:www.sina.com.cn&amp;lt;CRLF&amp;gt; Accept-Encoding:gzip, deflate&amp;lt;CRLF&amp;gt; User-Agent:Mozilla/4.0(compatible;MSIE6.0;Windows NT 5.0)&amp;lt;CRLF&amp;gt; Connection:Keep-Alive&amp;lt;CRLF&amp;gt; &amp;lt;CRLF&amp;gt; {Optional Content Body}   起始行：Method Request-URI HTTP-Version  请求方法  GET 请求Request-URI所标识的资源 POST 在资源后附加新的数据 HEAD 请求获取资源的响应消息报头 PUT 请求服务器存储一个资源 DELETE 请求删除资源 TRACE 请求服务器回送收到的请求信息，用于诊断测试 CONNECT 保留字 OPTIONS 请求查询服务器性能   消息报头：（见后） 消息主体：可选，对POST请求，消息主体为POST的数据  响应 HTTP/1.1 200 OK&amp;lt;CRLF&amp;gt; Content-Length:123&amp;lt;CRLF&amp;gt; Content-Type:text/html;charset=utf-8&amp;lt;CRLF&amp;gt; ...&amp;lt;CRLF&amp;gt; &amp;lt;CRLF&amp;gt; {Optional Content Body}   起始行：HTTP-Version Status-Code Reason-Phrase  状态码  1xx：指示信息&amp;ndash;消息已接收，继续处理 2xx：成功&amp;ndash;消息已被成功接收、理解、接受  200 OK  3xx：重定向&amp;ndash;要完成请求必须进行进一步的操作 4xx：客户端错误&amp;ndash;请求有语法错误或者请求无法实现  400 Bad Request 401 Unauthorized 403 Forbidden 404 Not Found  5xx：服务端错误&amp;ndash;服务端无法实现请求  500 Internal Server Error 503 Server Unavailable    消息报头：（见下） 消息主体：可选，返回的内容  消息报头  常见请求报文头信息</description>
    </item>
    
    <item>
      <title>TCP/IP协议摘要</title>
      <link>https://feng1st.github.io/post/2017/06/tcp-ip-protocol/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017/06/tcp-ip-protocol/</guid>
      <description> 协议分层  应用层 Application  对应OSI协议Application、Presentation、Session三层 常见上层协议：HTTP、FTP、SMTP、TELNET  传输层 Transport  对应OSI协议Transport层 协议：  TCP：（见下） UDP：不超时重传、不错误重传、不保证顺序   网络层 Internet  对应OSI协议Network层 协议：  IP：（见下） ARP：IP地址到MAC地址转换 DARP：（略） ICMP：发生错误时，错误信息封包传给主机；IP重定向报文；路由发现报文  ping traceroute  利用IP协议的TTL实现 利用主机不可达和端口不可达区分     网络接口层 Network Interface  对应OSI协议Data Link、Physical两层 附加以太网部首   IP协议  附加IP部首  TTL，生存周期，每路由一层减1，为0时丢弃  实现traceroute   路由顺序：  TTL为0时丢弃 匹配主机 匹配同子网路由器 匹配同网号路由器 匹配默认路由器  不保证可达，需配合ICMP由上层实现可靠性  TCP协议 流量控制的思想可以用于上层应用的开发
 附加TCP部首 可靠协议  合理分块 超时重发 校验和校验 发送确认 组装时排序 滑动窗口流控  建立连接，三次握手：    断开连接，四次握手：    流量控制  延迟发送  捎带ACK：延迟发送ACK Nagle算法：延迟发送数据  滑动窗口 rwnd：接收方缓冲区 拥塞窗口 cwnd：探测带宽上限  慢启动阶段（未超过门限 ssthresh）  cwnd *= 2  拥塞避免阶段（超过门限）  cwnd += 1    超时重传  超时时间调整：简单的说，是一个涉及旧超时时间、新传输时间、经验系数、方差的函数 拥塞：某报文超时需要重传  ssthresh /= 2 cwnd = 1 进入慢启动阶段  快速重传：当收到3个重复ACK时（=3个，丢包是大概率事件）  ssthresh /= 2 cwnd = ssthresh 进入拥塞避免阶段  快速恢复：（略）  其它计时器  坚持定时器：双方滑动窗口为0时的试探间隔，避免互相等待死锁 保活定时器：判断保持或断开半开放连接 2MSL定时器：端口可再次使用的计时器，在此期间，服务端可以重启而不报端口占用错误，但不可以建立连接   </description>
    </item>
    
  </channel>
</rss>