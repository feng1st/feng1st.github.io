<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 知耻而后勇，知不足而后进</title>
    <link>https://feng1st.github.io/post/</link>
    <description>Recent content in Posts on 知耻而后勇，知不足而后进</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>utf-8</language>
    <lastBuildDate>Thu, 08 Jun 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://feng1st.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TCP/IP协议摘要</title>
      <link>https://feng1st.github.io/post/2017-06-08-tcp-ip/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-08-tcp-ip/</guid>
      <description>

&lt;h2 id=&#34;协议分层:37348dd643956dbb1568c00c8cc0c5b2&#34;&gt;协议分层&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;应用层 Application&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;对应OSI协议Application、Presentation、Session三层&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;常见上层协议：HTTP、FTP、SMTP、TELNET&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;传输层 Transport&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;对应OSI协议Transport层&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;协议：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;TCP：（见下）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;UDP：不超时重传、不错误重传、不保证顺序&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;网络层 Internet&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;对应OSI协议Network层&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;协议：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;IP：（见下）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ARP：IP地址到MAC地址转换&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;DARP：（略）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ICMP：发生错误时，错误信息封包传给主机；IP重定向报文；路由发现报文&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;ping&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;traceroute&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;利用IP协议的TTL实现&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;利用主机不可达和端口不可达区分&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;网络接口层 Network Interface&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;对应OSI协议Data Link、Physical两层&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;附加以太网部首&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ip协议:37348dd643956dbb1568c00c8cc0c5b2&#34;&gt;IP协议&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;附加IP部首&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;TTL，生存周期，每路由一层减1，为0时丢弃&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;实现traceroute&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;路由顺序：&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;TTL为0时丢弃&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;匹配主机&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;匹配同子网路由器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;匹配同网号路由器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;匹配默认路由器&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;不保证可达，需配合ICMP由上层实现可靠性&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tcp协议:37348dd643956dbb1568c00c8cc0c5b2&#34;&gt;TCP协议&lt;/h2&gt;

&lt;p&gt;流量控制的思想可以用于上层应用的开发&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;附加TCP部首&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;可靠协议&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;合理分块&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;超时重发&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;校验和校验&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;发送确认&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;组装时排序&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;滑动窗口流控&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;建立连接，三次握手：&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;Client-&amp;gt;&amp;gt;Server: SYN&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Server&amp;ndash;&amp;gt;&amp;gt;Client: ACK&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Client&amp;ndash;&amp;gt;&amp;gt;Server: ACK&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;断开连接，四次握手：&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;Client-&amp;gt;&amp;gt;Server: FIN&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Server&amp;ndash;&amp;gt;&amp;gt;Client: ACK&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Server-&amp;gt;&amp;gt;Client: FIN&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Client&amp;ndash;&amp;gt;&amp;gt;Server: ACK&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;流量控制&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;延迟发送&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;捎带ACK：延迟发送ACK&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Nagle算法：延迟发送数据&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;滑动窗口 rwnd：接收方缓冲区&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;拥塞窗口 cwnd：探测带宽上限&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;慢启动阶段（未超过门限 ssthresh）&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cwnd *= 2&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;拥塞避免阶段（超过门限）&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cwnd += 1&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;超时重传&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;超时时间调整：简单的说，是一个涉及旧超时时间、新传输时间、经验系数、方差的函数&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;拥塞：某报文超时需要重传&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssthresh /= 2&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cwnd = 1&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;进入慢启动阶段&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;快速重传：当收到3个重复ACK时（&lt;3个，乱序是大概率事件；&gt;=3个，丢包是大概率事件）&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssthresh /= 2&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cwnd = ssthresh&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;进入拥塞避免阶段&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;快速恢复：（略）&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;其它计时器&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;坚持定时器：双方滑动窗口为0时的试探间隔，避免互相等待死锁&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;保活定时器：判断保持或断开半开放连接&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2MSL定时器：端口可再次使用的计时器，在此期间，服务端可以重启而不报端口占用错误，但不可以建立连接&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java内存模型和GC机制摘要</title>
      <link>https://feng1st.github.io/post/2017-06-06-jvm-memory-gc/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://feng1st.github.io/post/2017-06-06-jvm-memory-gc/</guid>
      <description>

&lt;h2 id=&#34;java对象:f83914257d3b33026de5ffce00ad7f99&#34;&gt;Java对象&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;对象位置&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;对象实例在堆中分配&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;实例对应的类信息在方法区分配&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对象信息&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;对象实例包含对象头和对象属性&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对象头包含对象信息，包括分代年龄、锁信息等；还包括对方法区类信息的引用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;类信息包含对父类/接口的引用，用于方法重载&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对象大小&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;空对象大小等于对象头大小，在32位虚拟机占8字节，64位占16字节，开启压缩占12字节&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;引用在32位虚拟机占4字节，64位占8字节，开启压缩占4字节&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;数组类型大小要在元素类型大小上增加4字节数组长度&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对象最终大小按8字节对齐&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;java内存区域:f83914257d3b33026de5ffce00ad7f99&#34;&gt;Java内存区域&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;程序计数器 Program Counter Register&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;每线程&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对于Java方法，记录当前字节码位置；对于Native方法，记录为Undefined&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;虚拟机栈 VM Stack&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;每线程&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;保存方法调用时的栈帧 Stack Frame&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;栈帧存放方法调用的局部变量表、操作栈、动态连接、方法出口等&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;局部变量表保存简单变量和对象的引用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;栈帧大小在方法生存期内固定&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如果栈深度超过虚拟机规定大小，抛出StackOverflowError&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果可供分配的内存不够，抛出OutOfMemoryError&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;本地方法栈 Native Method Stack&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;类似虚拟机栈&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;堆 Heap&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;线程共享&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;存储对象实例&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;是涉及GC的主要区域&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;方法区 Method Area&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;线程共享&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;保存加载的类信息（包括版本、接口、属性、方法、final常量、静态变量等）和运行时常量池 Runtime Constant Pool（包括字面常量、符号引用和直接引用）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在分代GC机制里，一般被成为永久代 Permanent Gen&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对于存在大量Proxy动态类的系统，要考虑回收的问题&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;堆和栈的区别:f83914257d3b33026de5ffce00ad7f99&#34;&gt;堆和栈的区别&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;栈：存放栈帧，内部包括简单变量和对象引用，在栈顶分配，后进先出，速度快&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;堆：存放对象实例，会因回收造成内存碎片，需要寻找下一个可供分配的连续空间，速度慢&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;对象访问方式:f83914257d3b33026de5ffce00ad7f99&#34;&gt;对象访问方式&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;通过句柄池&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;栈或堆中的对象引用指向句柄池句柄，句柄分别指向堆中对象实例和方法区类信息&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对象引用到句柄是多对一，句柄到对象实例是一对一，意味着对象实例因为GC移动而发生地址改变，只需要修改句柄&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;直接分配&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;栈或堆中的对象引用指向堆中的对象实例，对象实例内部指向方法区类信息&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;无中间层，较快。但是一旦对象实例移动，则需要更新所有的引用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;HotSpot采用&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;对象生命周期:f83914257d3b33026de5ffce00ad7f99&#34;&gt;对象生命周期&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;引用计数法&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;存在环状引用的问题&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;可达性分析算法&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;GC Roots&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;虚拟机栈引用的对象&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;本地方法栈引用的对象&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;方法区类静态属性引用的对象&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;方法区常量引用的对象&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;内存分代:f83914257d3b33026de5ffce00ad7f99&#34;&gt;内存分代&lt;/h2&gt;

&lt;p&gt;不同对象的生存周期不同，不能因为回收短期对象，就扫描整个堆区&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;年轻代 Young Gen&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;默认分配区域&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;老年代 Old Gen&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;存放多次回收后依然幸存的对象，或者无法在年轻代分配的大对象&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;永久代 Permanent Gen&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;存放方法区内容，HotSpot采用，但计划弃用&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;回收算法:f83914257d3b33026de5ffce00ad7f99&#34;&gt;回收算法&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;复制算法 Copying&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;A、B两块空间，在A块连续分配，空间不够时，将A块的存活对象依次复制到B块头部，并切换使用B块，A块清空&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;分配简单，连续分配，快；需要两倍空间，浪费；复制内容如果过大，依然会慢&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;标记-清除算法 Mark-Sweep&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;先对所有可回收对象做标记，然后再回收这些对象所占的空间&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不需要移动，快；回收后会有内存碎片&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;标记-整理算法 Mark-Compact&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;先对所有可回收对象做标记，然后将幸存对象依次前移&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;需要移动，慢；回收后无内存碎片&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;分配机制:f83914257d3b33026de5ffce00ad7f99&#34;&gt;分配机制&lt;/h2&gt;

&lt;p&gt;HotSpot中，年轻代分为1个Eden和2个Survivor。在Eden区分配对象，如果空间不足，将Eden区和活动Survivor区幸存对象，根据幸存次数，分别移至备用Survivor和老年代中，然后切换活动/备用Survivor。&lt;/p&gt;

&lt;h2 id=&#34;回收方式:f83914257d3b33026de5ffce00ad7f99&#34;&gt;回收方式&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;串行 Serial&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;暂停用户线程，单线程回收&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;并行 Parallel&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;暂停用户线程，多线程并行回收&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;并发 Concurrent&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;回收线程和用户线程同时工作&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;垃圾回收器:f83914257d3b33026de5ffce00ad7f99&#34;&gt;垃圾回收器&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Serial收集器&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;新生代&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;停止复制算法（停止 Stop-the-World，在垃圾回收时，暂停用户线程）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;串行回收&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ParNew收集器&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;新生代&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;停止复制算法&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;并行回收&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Parallel Scavenge收集器&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;新生代&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;停止复制算法&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;并行回收&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;关注吞吐量、支持自适应调节&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Serial Old收集器&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;老年代&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;停止标记整理算法&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;串行回收&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;CMS收集器Concurrent Mode Failure的后备&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Parallel Old收集器&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;老年代&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;停止标记整理算法&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;并行回收&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;搭配Parallel Scavenge收集器&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CMS收集器&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;老年代&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;标记清除算法&lt;br /&gt;

&lt;ol&gt;
&lt;li&gt;初始标记：停止，串行，仅标记GC Roots直接引用的对象&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;并发标记：并发，从初始标记对象往下追踪&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;重新标记：停止，并行，修正并发标记期间改变的对象&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;并发清除：并发&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;并发回收会占用运行时CPU资源&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;因为是并发回收，所以要为GC期间新生成的对象预留空间，如果空间不够，会抛出Concurrent Mode Failure，回退到Serial Old收集器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;因为是标记清除算法，如果产生的内存碎片导致可用连续空间不足，会触发一次带整理的Full GC&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;G1收集器&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;堆划分为相同的区域 Region&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;优先回收价值最大的区域&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;使用Remembered Set避免全堆扫描&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;整体为标记整理算法，区域间为复制算法&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;初始标记：停止，串行&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;并发标记：并发&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;最终标记：停止，并行&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;筛选回收：停止，并行&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;gc监控:f83914257d3b33026de5ffce00ad7f99&#34;&gt;GC监控&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;jstat可以用来实时查看内存分配及GC信息&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;jmap可以dump出内存对象，供进一步分析&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Java命令行参数可以设置输出详细GC日志，供进一步分析&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>