<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Code One</title>
    <link>http://codeone.io/</link>
    <description>Recent content in Home on Code One</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://codeone.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Nim4LeetCode] 3. Longest Substring Without Repeating Characters</title>
      <link>http://codeone.io/nim-lang/leetcode/0003-longest-substring-without-repeating-characters/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0003-longest-substring-without-repeating-characters/</guid>
      <description>Problem Given a string, find the length of the longest substring without repeating characters.
Examples:
Given &amp;quot;abcabcbb&amp;quot;, the answer is &amp;quot;abc&amp;quot;, which the length is 3.
Given &amp;quot;bbbbb&amp;quot;, the answer is &amp;quot;b&amp;quot;, with the length of 1.
Given &amp;quot;pwwkew&amp;quot;, the answer is &amp;quot;wke&amp;quot;, with the length of 3. Note that the answer must be a substring, &amp;quot;pwke&amp;quot; is a subsequence and not a substring.
Solution import tables proc lengthOfLongestSubstring(s: string): int = var map = initTable[char, int]() n: int = 0 for i in 0.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 2. Add Two Numbers</title>
      <link>http://codeone.io/nim-lang/leetcode/0002-add-two-numbers/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0002-add-two-numbers/</guid>
      <description>Problem You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example
Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4) Output: 7 -&amp;gt; 0 -&amp;gt; 8 Explanation: 342 + 465 = 807.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 1. Two Sum</title>
      <link>http://codeone.io/nim-lang/leetcode/0001-two-sum/</link>
      <pubDate>Wed, 07 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0001-two-sum/</guid>
      <description>Problem Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example:
Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].  Solution import tables proc twoSum(nums: seq[int], target: int): (int, int) = var idxMap = initTable[int, int]() for i in 0.</description>
    </item>
    
    <item>
      <title>【笔记】微服务介绍</title>
      <link>http://codeone.io/notes/2017/2017-06-23-introduction-to-microservices/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/notes/2017/2017-06-23-introduction-to-microservices/</guid>
      <description>原文: https://www.nginx.com/blog/introduction-to-microservices/
单一框架有什么问题 / 微服务框架解决什么问题？ 单一框架经过常年发展，扩充之后：
 过于复杂，难于理解和修改。修改容易引入bug
 启动变慢，降低调试和开发速度
 无法持续部署，无法快速升级。一个组件需要升级，整个应用都需要重新部署。部署后，因为受影响部分不明，需要更多的人工测试
 无法根据不同组件的需求进行伸缩扩展。比如，部分组件是CPU密集型，部分组件是内存密集型；部分组件压力小，单个实例可以应付，部分组件压力大，有部署多个实例的需求
 可靠性，组件异常（比如内存泄露），导致整个应用异常
 难于升级到新的技术和框架
  微服务框架  按功能划分，比如订单管理、客户端管理
 每个微服务是一个单独的小应用
 微服务对外暴露API，比如REST API
微服务之间可以通过暴露的API互相调用
微服务间还可以通过消息系统实现异步调用
外界一般不直接范围后端服务，而是通过API网关
 微服务通常通过虚拟机或Docker部署
  伸缩模型 x轴：水平复制，靠克隆伸缩。通过在负载均衡后部署多个实例，解决可用性和吞吐量的问题
y轴：功能解耦，靠拆分不同的事物伸缩。将单一应用通过功能/业务拆分成多个微服务
z轴：数据分区，靠拆分相似的事物伸缩
微服务架构对数据库schema的影响 微服务架构要求每个微服务有自己单独的数据库schema
这是为了更彻底的解耦
但是不可避免的，多个微服务数据库间存在重复数据
微服务架构和SOA的异同 微服务架构和SOA在表现层有相似性：都是由多个服务构成
区别：
1. 微服务架构弃用了比较重的WS规范，采用轻量的协议，比如REST
2. 微服务架构弃用了ESB
微服务的好处  将单一应用解构成多个服务，让每一个服务面临的复杂度降低，变得可管理、可控制、可维护
 开发方面：可以选用自己的技术，可以使用较新的技术
 部署方面：可以单独部署，更容易部署和测试
 伸缩方面：更容易按需扩展多实例
  微服务的问题 下面这些问题都不难解决，但是需要清楚存在这些问题
 分布式架构下调用的开销，以及服务不可用的处理
 数据库拆分后，分布式事务基本不采用，需要最终一致方案
 测试更困难，可能需要启动服务本身和依赖服务（或者伪服务）</description>
    </item>
    
    <item>
      <title>【笔记】高并发思路</title>
      <link>http://codeone.io/notes/2017/2017-06-17-high-concurrency/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/notes/2017/2017-06-17-high-concurrency/</guid>
      <description>解决高并发，无非两个方向：
 分而治之：分流
 优化单个服务器处理能力
  客户端  尽量使用缓存
 尽量本地处理
 尽量减少不必要的访问
  分流  负载均衡
 业务拆分
 静态内容直接返回，包括使用CDN
 缓存（动态内容缓存、页面片段缓存）
  优化单个服务器处理程序  缓存：缓存永远是最重要的
 异步：能异步就异步
如果有多个异步调用没有依赖关系，可以并行调用，然后在最后一起等结果
 多线程：
如果是CPU吃重的应用，线程数过高不能解决问题
I/O吃重要分成两种：1种是因为传输数据量过大，导致I/O重，这种线程数高不解决问题
另一种是传输数据不大，但是等待远端处理的时间很长，这种可以提升线程数，并发处理后面的任务
 预处理：预先算出局部结果，要获取整体结果时，只需要基于局部结果计算。比如月报表可以基于天报表
 还有一种预处理，是和缓存结合的预处理
不是等到缓存失效时，再穿透后端。而是缓存快要失效时，就起线程向后端请求数据更新缓存。在线程处理期间，缓存里的数据依然是有效的。线程处理完毕，缓存里的数据已更新
 优化SQL，正确使用索引
 尽量不要使用分布式事务
2阶段提交不是万能药
 各节点进入事务
 各节点事务执行完毕，prepare（意味着，接下来出了问题，比如重启，事务也能生效）
 各节点commit
假设最后一个节点，commit前离线了，并且永远不再上线，事务状态依然是错误的
  应用算法优化
  优化数据层  合理选用数据库（OLTP、OLAP）和引擎（InnoDB、MyISAM）
 合理设置索引
 使用集群，读写分离
 合理分表分库</description>
    </item>
    
    <item>
      <title>【读书笔记】大型网站系统与Java中间件实践</title>
      <link>http://codeone.io/notes/2017/2017-05-01-large-web-systems-and-java-middleware-practice/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/notes/2017/2017-05-01-large-web-systems-and-java-middleware-practice/</guid>
      <description>豆瓣链接: https://book.douban.com/subject/25867042/
作者曾宪杰，淘宝花名华黎，现任淘宝技术部总监。
本书反映了淘宝网一路发展过来，技术架构演进的一个过程。书中的绝大多数内容，都已经落地为阿里内部广泛使用的基础设施、中间件。部分组件已经开源，比如Dubbo、RocketMQ，可以在网上下到。
本文是读书过程中对部分重要知识点的一个记录，也可以当作回顾时的索引。
第1章 分布式系统介绍 1.2.3.2 网络IO实现方式  BIO/NIO/AIO
  1.2.4.3 控制器的变化  使用硬件/LVS负载均衡
 增加网络开销（流量，延迟）
 单点
  使用名称服务的直接连接方式
 服务提供方 &amp;ndash;注册&amp;ndash;&amp;gt; 名称服务 &amp;ndash;&amp;gt; 请求方 (负载均衡)
 代码升级比较复杂
  使用规则服务器
 规则服务器 &amp;ndash;规则&amp;ndash;&amp;gt; 请求方 (规则计算)
  Master+Worker
 Master (规则计算) &amp;ndash;结果&amp;ndash;&amp;gt; 请求方
   1.2.5 分布式系统的难点  缺乏全局时钟
 单独集群管理时序
  应对/解决故障独立性
 处理单点故障
 事务
  第2章 大型网站及其架构演进过程 2.</description>
    </item>
    
  </channel>
</rss>