<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Code One</title>
    <link>http://codeone.io/</link>
    <description>Recent content in Home on Code One</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 27 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://codeone.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Nim4LeetCode] 21. Merge Two Sorted Lists</title>
      <link>http://codeone.io/nim-lang/leetcode/0021-merge-two-sorted-lists/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0021-merge-two-sorted-lists/</guid>
      <description>Problem Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
Example:
Input: 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4  Solution type ListNodeObj = object val: int next: ref ListNodeObj ListNode = ref ListNodeObj proc newListNode(val: int, next: ListNode = nil): ListNode = result = ListNode(val: val, next: next) proc mergeTwoLists(l1: ListNode, l2: ListNode): ListNode = let dummy = newListNode(0) var p = dummy p1 = l1 p2 = l2 while p1 !</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 20. Valid Parentheses</title>
      <link>http://codeone.io/nim-lang/leetcode/0020-valid-parentheses/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0020-valid-parentheses/</guid>
      <description>Problem Given a string containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid.
The brackets must close in the correct order, &amp;quot;()&amp;quot; and &amp;quot;()[]{}&amp;quot; are all valid but &amp;quot;(]&amp;quot; and &amp;quot;([)]&amp;quot; are not.
Solution import deques proc isValid(s: string): bool = var stack = initDeque[char]() for c in s: case c: of &amp;#39;(&amp;#39;: stack.addLast(&amp;#39;)&amp;#39;) of &amp;#39;[&amp;#39;: stack.addLast(&amp;#39;]&amp;#39;) of &amp;#39;{&amp;#39;: stack.addLast(&amp;#39;}&amp;#39;) of &amp;#39;)&amp;#39;, &amp;#39;]&amp;#39;, &amp;#39;}&amp;#39;: if stack.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 19. Remove Nth Node From End of List</title>
      <link>http://codeone.io/nim-lang/leetcode/0019-remove-nth-node-from-end-of-list/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0019-remove-nth-node-from-end-of-list/</guid>
      <description>Problem Given a linked list, remove the nth node from the end of list and return its head.
For example,
 Given linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-&amp;gt;2-&amp;gt;3-&amp;gt;5.  Note:
Given n will always be valid.
Try to do this in one pass.
Solution type ListNodeObj = object val: int next: ref ListNodeObj ListNode = ref ListNodeObj proc newListNode(val: int, next: ListNode = nil): ListNode = result = ListNode(val: val, next: next) proc removeNthFromEnd(head: ListNode, n: int): ListNode = let dummyHead = newListNode(0, head) var p, q = dummyHead for i in 0 .</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 18. 4Sum</title>
      <link>http://codeone.io/nim-lang/leetcode/0018-4sum/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0018-4sum/</guid>
      <description>Problem Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note: The solution set must not contain duplicate quadruplets.
For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0. A solution set is: [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]  Solution import algorithm proc fourSum(nums: openArray[int], target: int): seq[(int, int, int, int)] = result = newSeq[(int, int, int, int)]() let sorted = sorted(nums, system.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 17. Letter Combinations of a Phone Number</title>
      <link>http://codeone.io/nim-lang/leetcode/0017-letter-combinations-of-a-phone-number/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0017-letter-combinations-of-a-phone-number/</guid>
      <description>Problem Given a digit string, return all possible letter combinations that the number could represent.
A mapping of digit to letters (just like on the telephone buttons) is given below.
Input:Digit string &amp;quot;23&amp;quot; Output: [&amp;quot;ad&amp;quot;, &amp;quot;ae&amp;quot;, &amp;quot;af&amp;quot;, &amp;quot;bd&amp;quot;, &amp;quot;be&amp;quot;, &amp;quot;bf&amp;quot;, &amp;quot;cd&amp;quot;, &amp;quot;ce&amp;quot;, &amp;quot;cf&amp;quot;].  Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.
Solution import sequtils const MAP = [&amp;#34;&amp;#34;, # 0 &amp;#34;&amp;#34;, # 1 &amp;#34;abc&amp;#34;, # 2 &amp;#34;def&amp;#34;, # 3 &amp;#34;ghi&amp;#34;, # 4 &amp;#34;jkl&amp;#34;, # 5 &amp;#34;mno&amp;#34;, # 6 &amp;#34;pqrs&amp;#34;, # 7 &amp;#34;tuv&amp;#34;, # 8 &amp;#34;wxyz&amp;#34;] # 9 ORD_0 = ord(&amp;#39;0&amp;#39;) proc letterCombinations(digits: string): seq[string] = if digits == nil or digits.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 16. 3Sum Closest</title>
      <link>http://codeone.io/nim-lang/leetcode/0016-3sum-closest/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0016-3sum-closest/</guid>
      <description>Problem Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
 For example, given array S = {-1 2 1 -4}, and target = 1. The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 15. 3Sum</title>
      <link>http://codeone.io/nim-lang/leetcode/0015-3sum/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0015-3sum/</guid>
      <description>Problem Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note: The solution set must not contain duplicate triplets.
For example, given array S = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ]  Solution import algorithm proc threeSum(nums: openArray[int]): seq[(int, int, int)] = result = newSeq[(int, int, int)]() let sorted = sorted(nums, system.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 14. Longest Common Prefix</title>
      <link>http://codeone.io/nim-lang/leetcode/0014-longest-common-prefix/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0014-longest-common-prefix/</guid>
      <description> Problem Write a function to find the longest common prefix string amongst an array of strings.
Solution proc longestCommonPrefix(strs: openArray[string]): string = if strs.len == 0: return &amp;#34;&amp;#34; let str0 = strs[0] if str0.len == 0: return &amp;#34;&amp;#34; for j in 0 .. str0.len - 1: for i in 1 .. strs.len - 1: let strI = strs[i] if strI.len &amp;lt;= j or strI[j] != str0[j]: return str0.substr(0, j - 1) result = str0 when isMainModule: assert longestCommonPrefix([]) == &amp;#34;&amp;#34; assert longestCommonPrefix([&amp;#34;&amp;#34;]) == &amp;#34;&amp;#34; assert longestCommonPrefix([&amp;#34;&amp;#34;, &amp;#34;abc&amp;#34;]) == &amp;#34;&amp;#34; assert longestCommonPrefix([&amp;#34;abc&amp;#34;, &amp;#34;&amp;#34;]) == &amp;#34;&amp;#34; assert longestCommonPrefix([&amp;#34;abc&amp;#34;, &amp;#34;123&amp;#34;]) == &amp;#34;&amp;#34; assert longestCommonPrefix([&amp;#34;abc&amp;#34;, &amp;#34;ab&amp;#34;, &amp;#34;a&amp;#34;]) == &amp;#34;a&amp;#34; assert longestCommonPrefix([&amp;#34;a&amp;#34;, &amp;#34;ab&amp;#34;, &amp;#34;abc&amp;#34;]) == &amp;#34;a&amp;#34;</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 13. Roman to Integer</title>
      <link>http://codeone.io/nim-lang/leetcode/0013-roman-to-integer/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0013-roman-to-integer/</guid>
      <description>Problem Given a roman numeral, convert it to an integer.
Input is guaranteed to be within the range from 1 to 3999.
Solution const ORD_A = ord(&amp;#39;A&amp;#39;) MAP = [0, 0, 100, 500, 0, 0, 0, # A - G 0, 1, 0, 0, 50, 1000, 0, # H - N 0, 0, 0, 0, 0, 0, # O - T 0, 5, 0, 10, 0, 0] # U - Z proc romanToInt(s: string): int = var last = 0 for i in countdown(s.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 12. Integer to Roman</title>
      <link>http://codeone.io/nim-lang/leetcode/0012-integer-to-roman/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0012-integer-to-roman/</guid>
      <description> Problem Given an integer, convert it to a roman numeral.
Input is guaranteed to be within the range from 1 to 3999.
Solution const M = [&amp;#34;&amp;#34;, &amp;#34;M&amp;#34;, &amp;#34;MM&amp;#34;, &amp;#34;MMM&amp;#34;] C = [&amp;#34;&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;CC&amp;#34;, &amp;#34;CCC&amp;#34;, &amp;#34;CD&amp;#34;, &amp;#34;D&amp;#34;, &amp;#34;DC&amp;#34;, &amp;#34;DCC&amp;#34;, &amp;#34;DCCC&amp;#34;, &amp;#34;CM&amp;#34;] X = [&amp;#34;&amp;#34;, &amp;#34;X&amp;#34;, &amp;#34;XX&amp;#34;, &amp;#34;XXX&amp;#34;, &amp;#34;XL&amp;#34;, &amp;#34;L&amp;#34;, &amp;#34;LX&amp;#34;, &amp;#34;LXX&amp;#34;, &amp;#34;LXXX&amp;#34;, &amp;#34;XC&amp;#34;] I = [&amp;#34;&amp;#34;, &amp;#34;I&amp;#34;, &amp;#34;II&amp;#34;, &amp;#34;III&amp;#34;, &amp;#34;IV&amp;#34;, &amp;#34;V&amp;#34;, &amp;#34;VI&amp;#34;, &amp;#34;VII&amp;#34;, &amp;#34;VIII&amp;#34;, &amp;#34;IX&amp;#34;] proc intToRoman(num: int): string = result = M[num div 1000] &amp;amp; C[(num mod 1000) div 100] &amp;amp; X[(num mod 100) div 10] &amp;amp; I[num mod 10] when isMainModule: assert intToRoman(1) == &amp;#34;I&amp;#34; assert intToRoman(3999) == &amp;#34;MMMCMXCIX&amp;#34;</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 11. Container With Most Water</title>
      <link>http://codeone.io/nim-lang/leetcode/0011-container-with-most-water/</link>
      <pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0011-container-with-most-water/</guid>
      <description>Problem Given n non-negative integers a1, a2, &amp;hellip;, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 10. Regular Expression Matching</title>
      <link>http://codeone.io/nim-lang/leetcode/0010-regular-expression-matching/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0010-regular-expression-matching/</guid>
      <description>Problem Implement regular expression matching with support for &#39;.&#39; and &#39;*&#39;.
&#39;.&#39; Matches any single character. &#39;*&#39; Matches zero or more of the preceding element. The matching should cover the entire input string (not partial). The function prototype should be: bool isMatch(const char *s, const char *p) Some examples: isMatch(&amp;quot;aa&amp;quot;,&amp;quot;a&amp;quot;) → false isMatch(&amp;quot;aa&amp;quot;,&amp;quot;aa&amp;quot;) → true isMatch(&amp;quot;aaa&amp;quot;,&amp;quot;aa&amp;quot;) → false isMatch(&amp;quot;aa&amp;quot;, &amp;quot;a*&amp;quot;) → true isMatch(&amp;quot;aa&amp;quot;, &amp;quot;.*&amp;quot;) → true isMatch(&amp;quot;ab&amp;quot;, &amp;quot;.*&amp;quot;) → true isMatch(&amp;quot;aab&amp;quot;, &amp;quot;c*a*b&amp;quot;) → true  Solution import sequtils proc isMatch(s: string, p: string): bool = var dp = newSeqWith(s.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 9. Palindrome Number</title>
      <link>http://codeone.io/nim-lang/leetcode/0009-palindrome-number/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0009-palindrome-number/</guid>
      <description>Problem Determine whether an integer is a palindrome. Do this without extra space.
Some hints:
Could negative integers be palindromes? (ie, -1)
If you are thinking of converting the integer to string, note the restriction of using extra space.
You could also try reversing an integer. However, if you have solved the problem &amp;ldquo;Reverse Integer&amp;rdquo;, you know that the reversed integer might overflow. How would you handle such case?</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 8. String to Integer (atoi)</title>
      <link>http://codeone.io/nim-lang/leetcode/0008-string-to-integer-atoi/</link>
      <pubDate>Wed, 14 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0008-string-to-integer-atoi/</guid>
      <description>Problem Implement atoi to convert a string to an integer.
Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.
Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.
Requirements for atoi:
The function first discards as many whitespace characters as necessary until the first non-whitespace character is found.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 7. Reverse Integer</title>
      <link>http://codeone.io/nim-lang/leetcode/0007-reverse-integer/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0007-reverse-integer/</guid>
      <description>Problem Given a 32-bit signed integer, reverse digits of an integer.
Example 1:
Input: 123 Output: 321  Example 2:
Input: -123 Output: -321  Example 3:
Input: 120 Output: 21  Note:
Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
Solution const INT_MIN = 0x80000000&amp;#39;i32 INT_MAX = 0x7FFFFFFF&amp;#39;i32 INT_MIN_DIV_10 = INT_MIN div 10 INT_MAX_DIV_10 = INT_MAX div 10 proc reverse(x: int32): int32 = var t = x y = 0&amp;#39;i32 while t !</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 6. ZigZag Conversion</title>
      <link>http://codeone.io/nim-lang/leetcode/0006-zigzag-conversion/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0006-zigzag-conversion/</guid>
      <description>Problem The string &amp;quot;PAYPALISHIRING&amp;quot; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
P A H N A P L S I I G Y I R  And then read line by line: &amp;quot;PAHNAPLSIIGYIR&amp;quot;
Write the code that will take a string and make this conversion given a number of rows:</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 5. Longest Palindromic Substring</title>
      <link>http://codeone.io/nim-lang/leetcode/0005-longest-palindromic-substring/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0005-longest-palindromic-substring/</guid>
      <description>Problem Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
Example:
Input: &amp;quot;babad&amp;quot; Output: &amp;quot;bab&amp;quot; Note: &amp;quot;aba&amp;quot; is also a valid answer.  Example:
Input: &amp;quot;cbbd&amp;quot; Output: &amp;quot;bb&amp;quot;  Solution proc expandAroundCenter(s: string, left: int, right: int): (int, int) = var l = left r = right while l &amp;gt;= 0 and r &amp;lt; s.len and s[l] == s[r]: l -= 1 r += 1 result = (l + 1, r - 1) proc longestPalindrome(s: string): string = var left = 0 right = 0 for i in 0 .</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 4. Median of Two Sorted Arrays</title>
      <link>http://codeone.io/nim-lang/leetcode/0004-median-of-two-sorted-arrays/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0004-median-of-two-sorted-arrays/</guid>
      <description>Problem There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
Example 1:
nums1 = [1, 3] nums2 = [2] The median is 2.0  Example 2:
nums1 = [1, 2] nums2 = [3, 4] The median is (2 + 3)/2 = 2.5  Solution proc findMedianSortedArrays(nums1: seq[int], nums2: seq[int]): float = var A = nums1 B = nums2 m = A.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 3. Longest Substring Without Repeating Characters</title>
      <link>http://codeone.io/nim-lang/leetcode/0003-longest-substring-without-repeating-characters/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0003-longest-substring-without-repeating-characters/</guid>
      <description>Problem Given a string, find the length of the longest substring without repeating characters.
Examples:
Given &amp;quot;abcabcbb&amp;quot;, the answer is &amp;quot;abc&amp;quot;, which the length is 3.
Given &amp;quot;bbbbb&amp;quot;, the answer is &amp;quot;b&amp;quot;, with the length of 1.
Given &amp;quot;pwwkew&amp;quot;, the answer is &amp;quot;wke&amp;quot;, with the length of 3. Note that the answer must be a substring, &amp;quot;pwke&amp;quot; is a subsequence and not a substring.
Solution import tables proc lengthOfLongestSubstring(s: string): int = var map = initTable[char, int]() n = 0 for i in 0 .</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 2. Add Two Numbers</title>
      <link>http://codeone.io/nim-lang/leetcode/0002-add-two-numbers/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0002-add-two-numbers/</guid>
      <description>Problem You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example
Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4) Output: 7 -&amp;gt; 0 -&amp;gt; 8 Explanation: 342 + 465 = 807.</description>
    </item>
    
    <item>
      <title>[Nim4LeetCode] 1. Two Sum</title>
      <link>http://codeone.io/nim-lang/leetcode/0001-two-sum/</link>
      <pubDate>Wed, 07 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/nim-lang/leetcode/0001-two-sum/</guid>
      <description>Problem Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example:
Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].  Solution import tables proc twoSum(nums: openArray[int], target: int): (int, int) = var idxMap = initTable[int, int]() for i in 0 .</description>
    </item>
    
    <item>
      <title>【笔记】微服务介绍</title>
      <link>http://codeone.io/notes/2017/2017-06-23-introduction-to-microservices/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/notes/2017/2017-06-23-introduction-to-microservices/</guid>
      <description>原文: https://www.nginx.com/blog/introduction-to-microservices/
单一框架有什么问题 / 微服务框架解决什么问题？ 单一框架经过常年发展，扩充之后：
 过于复杂，难于理解和修改。修改容易引入bug
 启动变慢，降低调试和开发速度
 无法持续部署，无法快速升级。一个组件需要升级，整个应用都需要重新部署。部署后，因为受影响部分不明，需要更多的人工测试
 无法根据不同组件的需求进行伸缩扩展。比如，部分组件是CPU密集型，部分组件是内存密集型；部分组件压力小，单个实例可以应付，部分组件压力大，有部署多个实例的需求
 可靠性，组件异常（比如内存泄露），导致整个应用异常
 难于升级到新的技术和框架
  微服务框架  按功能划分，比如订单管理、客户端管理
 每个微服务是一个单独的小应用
 微服务对外暴露API，比如REST API
微服务之间可以通过暴露的API互相调用
微服务间还可以通过消息系统实现异步调用
外界一般不直接范围后端服务，而是通过API网关
 微服务通常通过虚拟机或Docker部署
  伸缩模型 x轴：水平复制，靠克隆伸缩。通过在负载均衡后部署多个实例，解决可用性和吞吐量的问题
y轴：功能解耦，靠拆分不同的事物伸缩。将单一应用通过功能/业务拆分成多个微服务
z轴：数据分区，靠拆分相似的事物伸缩
微服务架构对数据库schema的影响 微服务架构要求每个微服务有自己单独的数据库schema
这是为了更彻底的解耦
但是不可避免的，多个微服务数据库间存在重复数据
微服务架构和SOA的异同 微服务架构和SOA在表现层有相似性：都是由多个服务构成
区别：
1. 微服务架构弃用了比较重的WS规范，采用轻量的协议，比如REST
2. 微服务架构弃用了ESB
微服务的好处  将单一应用解构成多个服务，让每一个服务面临的复杂度降低，变得可管理、可控制、可维护
 开发方面：可以选用自己的技术，可以使用较新的技术
 部署方面：可以单独部署，更容易部署和测试
 伸缩方面：更容易按需扩展多实例
  微服务的问题 下面这些问题都不难解决，但是需要清楚存在这些问题
 分布式架构下调用的开销，以及服务不可用的处理
 数据库拆分后，分布式事务基本不采用，需要最终一致方案
 测试更困难，可能需要启动服务本身和依赖服务（或者伪服务）</description>
    </item>
    
    <item>
      <title>【笔记】高并发思路</title>
      <link>http://codeone.io/notes/2017/2017-06-17-high-concurrency/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/notes/2017/2017-06-17-high-concurrency/</guid>
      <description>解决高并发，无非两个方向：
 分而治之：分流
 优化单个服务器处理能力
  客户端  尽量使用缓存
 尽量本地处理
 尽量减少不必要的访问
  分流  负载均衡
 业务拆分
 静态内容直接返回，包括使用CDN
 缓存（动态内容缓存、页面片段缓存）
  优化单个服务器处理程序  缓存：缓存永远是最重要的
 异步：能异步就异步
如果有多个异步调用没有依赖关系，可以并行调用，然后在最后一起等结果
 多线程：
如果是CPU吃重的应用，线程数过高不能解决问题
I/O吃重要分成两种：1种是因为传输数据量过大，导致I/O重，这种线程数高不解决问题
另一种是传输数据不大，但是等待远端处理的时间很长，这种可以提升线程数，并发处理后面的任务
 预处理：预先算出局部结果，要获取整体结果时，只需要基于局部结果计算。比如月报表可以基于天报表
 还有一种预处理，是和缓存结合的预处理
不是等到缓存失效时，再穿透后端。而是缓存快要失效时，就起线程向后端请求数据更新缓存。在线程处理期间，缓存里的数据依然是有效的。线程处理完毕，缓存里的数据已更新
 优化SQL，正确使用索引
 尽量不要使用分布式事务
2阶段提交不是万能药
 各节点进入事务
 各节点事务执行完毕，prepare（意味着，接下来出了问题，比如重启，事务也能生效）
 各节点commit
假设最后一个节点，commit前离线了，并且永远不再上线，事务状态依然是错误的
  应用算法优化
  优化数据层  合理选用数据库（OLTP、OLAP）和引擎（InnoDB、MyISAM）
 合理设置索引
 使用集群，读写分离
 合理分表分库</description>
    </item>
    
    <item>
      <title>【读书笔记】大型网站系统与Java中间件实践</title>
      <link>http://codeone.io/notes/2017/2017-05-01-large-web-systems-and-java-middleware-practice/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://codeone.io/notes/2017/2017-05-01-large-web-systems-and-java-middleware-practice/</guid>
      <description>豆瓣链接: https://book.douban.com/subject/25867042/
作者曾宪杰，淘宝花名华黎，现任淘宝技术部总监。
本书反映了淘宝网一路发展过来，技术架构演进的一个过程。书中的绝大多数内容，都已经落地为阿里内部广泛使用的基础设施、中间件。部分组件已经开源，比如Dubbo、RocketMQ，可以在网上下到。
本文是读书过程中对部分重要知识点的一个记录，也可以当作回顾时的索引。
第1章 分布式系统介绍 1.2.3.2 网络IO实现方式  BIO/NIO/AIO
  1.2.4.3 控制器的变化  使用硬件/LVS负载均衡
 增加网络开销（流量，延迟）
 单点
  使用名称服务的直接连接方式
 服务提供方 &amp;ndash;注册&amp;ndash;&amp;gt; 名称服务 &amp;ndash;&amp;gt; 请求方 (负载均衡)
 代码升级比较复杂
  使用规则服务器
 规则服务器 &amp;ndash;规则&amp;ndash;&amp;gt; 请求方 (规则计算)
  Master+Worker
 Master (规则计算) &amp;ndash;结果&amp;ndash;&amp;gt; 请求方
   1.2.5 分布式系统的难点  缺乏全局时钟
 单独集群管理时序
  应对/解决故障独立性
 处理单点故障
 事务
  第2章 大型网站及其架构演进过程 2.</description>
    </item>
    
  </channel>
</rss>